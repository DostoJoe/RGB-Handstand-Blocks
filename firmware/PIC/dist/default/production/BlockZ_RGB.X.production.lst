

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Mar 02 16:08:01 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	12F1572
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	dabs	1,0x7E,2
    31  0000                     
    32                           ; Version 2.05
    33                           ; Generated 20/12/2018 GMT
    34                           ; 
    35                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC12F1572 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     	;# 
    67  0001                     	;# 
    68  0002                     	;# 
    69  0003                     	;# 
    70  0004                     	;# 
    71  0005                     	;# 
    72  0006                     	;# 
    73  0007                     	;# 
    74  0008                     	;# 
    75  0009                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  0011                     	;# 
    80  0012                     	;# 
    81  0013                     	;# 
    82  0015                     	;# 
    83  0016                     	;# 
    84  0016                     	;# 
    85  0017                     	;# 
    86  0018                     	;# 
    87  0019                     	;# 
    88  001A                     	;# 
    89  001B                     	;# 
    90  001C                     	;# 
    91  008C                     	;# 
    92  0091                     	;# 
    93  0092                     	;# 
    94  0093                     	;# 
    95  0095                     	;# 
    96  0096                     	;# 
    97  0097                     	;# 
    98  0098                     	;# 
    99  0099                     	;# 
   100  009A                     	;# 
   101  009B                     	;# 
   102  009B                     	;# 
   103  009C                     	;# 
   104  009D                     	;# 
   105  009E                     	;# 
   106  009F                     	;# 
   107  010C                     	;# 
   108  0111                     	;# 
   109  0112                     	;# 
   110  0115                     	;# 
   111  0116                     	;# 
   112  0117                     	;# 
   113  0118                     	;# 
   114  0119                     	;# 
   115  011D                     	;# 
   116  011D                     	;# 
   117  018C                     	;# 
   118  0191                     	;# 
   119  0191                     	;# 
   120  0192                     	;# 
   121  0193                     	;# 
   122  0193                     	;# 
   123  0194                     	;# 
   124  0195                     	;# 
   125  0196                     	;# 
   126  0197                     	;# 
   127  0199                     	;# 
   128  019A                     	;# 
   129  019B                     	;# 
   130  019B                     	;# 
   131  019C                     	;# 
   132  019D                     	;# 
   133  019E                     	;# 
   134  019F                     	;# 
   135  020C                     	;# 
   136  028C                     	;# 
   137  030C                     	;# 
   138  038C                     	;# 
   139  0391                     	;# 
   140  0392                     	;# 
   141  0393                     	;# 
   142  0691                     	;# 
   143  0692                     	;# 
   144  0693                     	;# 
   145  0694                     	;# 
   146  0695                     	;# 
   147  0D8E                     	;# 
   148  0D8F                     	;# 
   149  0D90                     	;# 
   150  0D91                     	;# 
   151  0D91                     	;# 
   152  0D92                     	;# 
   153  0D93                     	;# 
   154  0D93                     	;# 
   155  0D94                     	;# 
   156  0D95                     	;# 
   157  0D95                     	;# 
   158  0D96                     	;# 
   159  0D97                     	;# 
   160  0D97                     	;# 
   161  0D98                     	;# 
   162  0D99                     	;# 
   163  0D99                     	;# 
   164  0D9A                     	;# 
   165  0D9B                     	;# 
   166  0D9C                     	;# 
   167  0D9C                     	;# 
   168  0D9D                     	;# 
   169  0D9D                     	;# 
   170  0D9E                     	;# 
   171  0D9F                     	;# 
   172  0DA0                     	;# 
   173  0DA1                     	;# 
   174  0DA1                     	;# 
   175  0DA2                     	;# 
   176  0DA3                     	;# 
   177  0DA3                     	;# 
   178  0DA4                     	;# 
   179  0DA5                     	;# 
   180  0DA5                     	;# 
   181  0DA6                     	;# 
   182  0DA7                     	;# 
   183  0DA7                     	;# 
   184  0DA8                     	;# 
   185  0DA9                     	;# 
   186  0DA9                     	;# 
   187  0DAA                     	;# 
   188  0DAB                     	;# 
   189  0DAC                     	;# 
   190  0DAC                     	;# 
   191  0DAD                     	;# 
   192  0DAD                     	;# 
   193  0DAE                     	;# 
   194  0DAF                     	;# 
   195  0DB0                     	;# 
   196  0DB1                     	;# 
   197  0DB1                     	;# 
   198  0DB2                     	;# 
   199  0DB3                     	;# 
   200  0DB3                     	;# 
   201  0DB4                     	;# 
   202  0DB5                     	;# 
   203  0DB5                     	;# 
   204  0DB6                     	;# 
   205  0DB7                     	;# 
   206  0DB7                     	;# 
   207  0DB8                     	;# 
   208  0DB9                     	;# 
   209  0DB9                     	;# 
   210  0DBA                     	;# 
   211  0DBB                     	;# 
   212  0DBC                     	;# 
   213  0DBC                     	;# 
   214  0DBD                     	;# 
   215  0DBD                     	;# 
   216  0DBE                     	;# 
   217  0DBF                     	;# 
   218  0DC0                     	;# 
   219  0FE4                     	;# 
   220  0FE5                     	;# 
   221  0FE6                     	;# 
   222  0FE7                     	;# 
   223  0FE8                     	;# 
   224  0FE8                     	;# 
   225  0FE9                     	;# 
   226  0FEA                     	;# 
   227  0FEA                     	;# 
   228  0FEB                     	;# 
   229  0FED                     	;# 
   230  0FEE                     	;# 
   231  0FEE                     	;# 
   232  0FEF                     	;# 
   233                           
   234                           	psect	idataBANK0
   235  0417                     __pidataBANK0:	
   236                           
   237                           ;initializer for _lowPowerReset
   238  0417  3401               	retlw	1
   239  0418  3400               	retlw	0
   240                           
   241                           ;initializer for _timerCount
   242  0419  3405               	retlw	5
   243  041A  3400               	retlw	0
   244                           
   245                           ;initializer for _skipColour
   246  041B  3401               	retlw	1
   247  041C  3400               	retlw	0
   248                           
   249                           ;initializer for _hold
   250  041D  34AF               	retlw	175
   251  041E  3400               	retlw	0
   252                           
   253                           ;initializer for _wait
   254  041F  3401               	retlw	1
   255  0420  3400               	retlw	0
   256                           
   257                           	psect	idataBANK1
   258  0300                     __pidataBANK1:	
   259                           
   260                           ;initializer for _purpleL
   261  0300  3450               	retlw	80
   262  0301  3400               	retlw	0
   263  0302  3464               	retlw	100
   264  0303  3400               	retlw	0
   265  0304  3414               	retlw	20
   266  0305  3400               	retlw	0
   267                           
   268                           ;initializer for _yellow
   269  0306  3464               	retlw	100
   270  0307  3400               	retlw	0
   271  0308  3400               	retlw	0
   272  0309  3400               	retlw	0
   273  030A  3428               	retlw	40
   274  030B  3400               	retlw	0
   275                           
   276                           ;initializer for _teal
   277  030C  3400               	retlw	0
   278  030D  3400               	retlw	0
   279  030E  344B               	retlw	75
   280  030F  3400               	retlw	0
   281  0310  3464               	retlw	100
   282  0311  3400               	retlw	0
   283                           
   284                           ;initializer for _blue
   285  0312  3400               	retlw	0
   286  0313  3400               	retlw	0
   287  0314  3464               	retlw	100
   288  0315  3400               	retlw	0
   289  0316  3400               	retlw	0
   290  0317  3400               	retlw	0
   291                           
   292                           ;initializer for _green
   293  0318  3400               	retlw	0
   294  0319  3400               	retlw	0
   295  031A  3400               	retlw	0
   296  031B  3400               	retlw	0
   297  031C  3464               	retlw	100
   298  031D  3400               	retlw	0
   299                           
   300                           ;initializer for _swNum
   301  031E  3401               	retlw	1
   302  031F  3400               	retlw	0
   303                           
   304                           ;initializer for _sw1Count
   305  0320  3401               	retlw	1
   306  0321  3400               	retlw	0
   307                           
   308                           ;initializer for _flashDelay
   309  0322  3490               	retlw	144
   310  0323  3401               	retlw	1
   311                           
   312                           ;initializer for _lime
   313  0324  3423               	retlw	35
   314  0325  3400               	retlw	0
   315  0326  3400               	retlw	0
   316  0327  3400               	retlw	0
   317  0328  3464               	retlw	100
   318  0329  3400               	retlw	0
   319                           
   320                           ;initializer for _purple
   321  032A  3450               	retlw	80
   322  032B  3400               	retlw	0
   323  032C  3464               	retlw	100
   324  032D  3400               	retlw	0
   325  032E  3400               	retlw	0
   326  032F  3400               	retlw	0
   327                           
   328                           ;initializer for _orange
   329  0330  3464               	retlw	100
   330  0331  3400               	retlw	0
   331  0332  3400               	retlw	0
   332  0333  3400               	retlw	0
   333  0334  340A               	retlw	10
   334  0335  3400               	retlw	0
   335                           
   336                           ;initializer for _red
   337  0336  3464               	retlw	100
   338  0337  3400               	retlw	0
   339  0338  3400               	retlw	0
   340  0339  3400               	retlw	0
   341  033A  3400               	retlw	0
   342  033B  3400               	retlw	0
   343                           
   344                           ;initializer for _white
   345  033C  3464               	retlw	100
   346  033D  3400               	retlw	0
   347  033E  3464               	retlw	100
   348  033F  3400               	retlw	0
   349  0340  3464               	retlw	100
   350  0341  3400               	retlw	0
   351                           
   352                           	psect	idataBANK2
   353  0421                     __pidataBANK2:	
   354                           
   355                           ;initializer for _mint
   356  0421  3441               	retlw	65
   357  0422  3400               	retlw	0
   358  0423  3464               	retlw	100
   359  0424  3400               	retlw	0
   360  0425  3400               	retlw	0
   361  0426  3400               	retlw	0
   362                           
   363                           	psect	nvBANK0
   364  006A                     __pnvBANK0:	
   365  006A                     _blueVal:	
   366  006A                     	ds	2
   367  006C                     _greenVal:	
   368  006C                     	ds	2
   369  006E                     _redVal:	
   370  006E                     	ds	2
   371                           
   372                           	psect	nvBANK1
   373  00E2                     __pnvBANK1:	
   374  00E2                     _prevB:	
   375  00E2                     	ds	2
   376  00E4                     _prevG:	
   377  00E4                     	ds	2
   378  00E6                     _prevR:	
   379  00E6                     	ds	2
   380  000C                     _PORTA	set	12
   381  000B                     _INTCON	set	11
   382  0064                     _RA4	set	100
   383  0063                     _RA3	set	99
   384  005A                     _TMR0IF	set	90
   385  0065                     _RA5	set	101
   386  009C                     _ADRESH	set	156
   387  009D                     _ADCON0bits	set	157
   388  008C                     _TRISA	set	140
   389  009E                     _ADCON1	set	158
   390  009D                     _ADCON0	set	157
   391  0095                     _OPTION_REG	set	149
   392  0099                     _OSCCON	set	153
   393  0097                     _WDTCON	set	151
   394  0464                     _TRISA4	set	1124
   395  0463                     _TRISA3	set	1123
   396  0460                     _TRISA0	set	1120
   397  0461                     _TRISA1	set	1121
   398  0462                     _TRISA2	set	1122
   399  0465                     _TRISA5	set	1125
   400  0117                     _FVRCON	set	279
   401  010C                     _LATA	set	268
   402  0197                     _VREGCON	set	407
   403  018C                     _ANSELA	set	396
   404  1064                     _WPUA4	set	4196
   405  1063                     _WPUA3	set	4195
   406  0DB5                     _PWM3PR	set	3509
   407  0DB3                     _PWM3DC	set	3507
   408  0DB1                     _PWM3PH	set	3505
   409  0DA5                     _PWM2PR	set	3493
   410  0DA3                     _PWM2DC	set	3491
   411  0DA1                     _PWM2PH	set	3489
   412  0D95                     _PWM1PR	set	3477
   413  0D93                     _PWM1DC	set	3475
   414  0D91                     _PWM1PH	set	3473
   415  0DBB                     _PWM3CON	set	3515
   416  0DBE                     _PWM3CLKCON	set	3518
   417  0DAB                     _PWM2CON	set	3499
   418  0DAE                     _PWM2CLKCON	set	3502
   419  0D9B                     _PWM1CON	set	3483
   420  0D9E                     _PWM1CLKCON	set	3486
   421  6DFF                     _PWM3LD	set	28159
   422  6D7F                     _PWM2LD	set	28031
   423  6CFF                     _PWM1LD	set	27903
   424                           
   425                           ; #config settings
   426  0000                     
   427                           	psect	cinit
   428  00BC                     start_initialization:	
   429  00BC                     __initialization:	
   430                           
   431                           ; Initialize objects allocated to BANK0
   432  00BC  3017               	movlw	low __pidataBANK0
   433  00BD  0084               	movwf	4
   434  00BE  3084               	movlw	(high __pidataBANK0)| (0+128)
   435  00BF  0085               	movwf	5
   436  00C0  3060               	movlw	low __pdataBANK0
   437  00C1  0086               	movwf	6
   438  00C2  3000               	movlw	high __pdataBANK0
   439  00C3  0087               	movwf	7
   440  00C4  300A               	movlw	10
   441  00C5  2427               	fcall	init_ram
   442                           
   443                           ; Initialize objects allocated to BANK1
   444  00C6  3000               	movlw	low __pidataBANK1
   445  00C7  0084               	movwf	4
   446  00C8  3083               	movlw	(high __pidataBANK1)| (0+128)
   447  00C9  0085               	movwf	5
   448  00CA  30A0               	movlw	low __pdataBANK1
   449  00CB  0086               	movwf	6
   450  00CC  3000               	movlw	high __pdataBANK1
   451  00CD  0087               	movwf	7
   452  00CE  3042               	movlw	66
   453  00CF  2427               	fcall	init_ram
   454                           
   455                           ; Initialize objects allocated to BANK2
   456  00D0  3021               	movlw	low __pidataBANK2
   457  00D1  0084               	movwf	4
   458  00D2  3084               	movlw	(high __pidataBANK2)| (0+128)
   459  00D3  0085               	movwf	5
   460  00D4  3020               	movlw	low __pdataBANK2
   461  00D5  0086               	movwf	6
   462  00D6  3001               	movlw	high __pdataBANK2
   463  00D7  0087               	movwf	7
   464  00D8  3006               	movlw	6
   465  00D9  2427               	fcall	init_ram
   466                           
   467                           ; Clear objects allocated to COMMON
   468  00DA  01FB               	clrf	__pbssCOMMON& (0+127)
   469                           
   470                           ; Clear objects allocated to BANK0
   471  00DB  3048               	movlw	low __pbssBANK0
   472  00DC  0084               	movwf	4
   473  00DD  3000               	movlw	high __pbssBANK0
   474  00DE  0085               	movwf	5
   475  00DF  3018               	movlw	24
   476  00E0  242D               	fcall	clear_ram0
   477                           
   478                           ; Clear objects allocated to BANK1
   479  00E1  0021               	movlb	1	; select bank1
   480  00E2  01E8               	clrf	__pbssBANK1& (0+127)
   481  00E3  01E9               	clrf	(__pbssBANK1+1)& (0+127)
   482  00E4  01EA               	clrf	(__pbssBANK1+2)& (0+127)
   483  00E5  01EB               	clrf	(__pbssBANK1+3)& (0+127)
   484  00E6  01EC               	clrf	(__pbssBANK1+4)& (0+127)
   485  00E7  01ED               	clrf	(__pbssBANK1+5)& (0+127)
   486  00E8                     end_of_initialization:	
   487                           ;End of C runtime variable initialization code
   488                           
   489  00E8                     __end_of__initialization:	
   490  00E8  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   491  00E9  0020               	movlb	0
   492  00EA  2B74               	ljmp	_main	;jump to C main() function
   493                           
   494                           	psect	bssCOMMON
   495  007B                     __pbssCOMMON:	
   496  007B                     _exitLoop:	
   497  007B                     	ds	1
   498                           
   499                           	psect	bssBANK0
   500  0048                     __pbssBANK0:	
   501  0048                     _sleepCount:	
   502  0048                     	ds	2
   503  004A                     _callSleep:	
   504  004A                     	ds	2
   505  004C                     _inSleep:	
   506  004C                     	ds	2
   507  004E                     _adcVal:	
   508  004E                     	ds	2
   509  0050                     _sw2Set:	
   510  0050                     	ds	2
   511  0052                     _sw1Set:	
   512  0052                     	ds	2
   513  0054                     _intCount2:	
   514  0054                     	ds	2
   515  0056                     _intCount1:	
   516  0056                     	ds	2
   517  0058                     _colourSet:	
   518  0058                     	ds	2
   519  005A                     _black:	
   520  005A                     	ds	6
   521                           
   522                           	psect	dataBANK0
   523  0060                     __pdataBANK0:	
   524  0060                     _lowPowerReset:	
   525  0060                     	ds	2
   526  0062                     _timerCount:	
   527  0062                     	ds	2
   528  0064                     _skipColour:	
   529  0064                     	ds	2
   530  0066                     _hold:	
   531  0066                     	ds	2
   532  0068                     _wait:	
   533  0068                     	ds	2
   534                           
   535                           	psect	bssBANK1
   536  00E8                     __pbssBANK1:	
   537  00E8                     _batLow:	
   538  00E8                     	ds	2
   539  00EA                     _dummy:	
   540  00EA                     	ds	2
   541  00EC                     _sw2Count:	
   542  00EC                     	ds	2
   543                           
   544                           	psect	dataBANK1
   545  00A0                     __pdataBANK1:	
   546  00A0                     _purpleL:	
   547  00A0                     	ds	6
   548  00A6                     _yellow:	
   549  00A6                     	ds	6
   550  00AC                     _teal:	
   551  00AC                     	ds	6
   552  00B2                     _blue:	
   553  00B2                     	ds	6
   554  00B8                     _green:	
   555  00B8                     	ds	6
   556  00BE                     _swNum:	
   557  00BE                     	ds	2
   558  00C0                     _sw1Count:	
   559  00C0                     	ds	2
   560  00C2                     _flashDelay:	
   561  00C2                     	ds	2
   562  00C4                     _lime:	
   563  00C4                     	ds	6
   564  00CA                     _purple:	
   565  00CA                     	ds	6
   566  00D0                     _orange:	
   567  00D0                     	ds	6
   568  00D6                     _red:	
   569  00D6                     	ds	6
   570  00DC                     _white:	
   571  00DC                     	ds	6
   572                           
   573                           	psect	dataBANK2
   574  0120                     __pdataBANK2:	
   575  0120                     _mint:	
   576  0120                     	ds	6
   577                           
   578                           	psect	inittext
   579  0427                     init_ram:	
   580  0427  00FE               	movwf	126
   581  0428                     initloop:	
   582  0428  0012               	moviw fsr0++
   583  0429  001E               	movwi fsr1++
   584  042A  0BFE               	decfsz	126,f
   585  042B  2C28               	goto	initloop
   586  042C  3400               	retlw	0
   587                           
   588                           	psect	clrtext
   589  042D                     clear_ram0:	
   590                           ;	Called with FSR0 containing the base address, and
   591                           ;	WREG with the size to clear
   592                           
   593  042D  0064               	clrwdt	;clear the watchdog before getting into this loop
   594  042E                     clrloop0:	
   595  042E  0180               	clrf	0	;clear RAM location pointed to by FSR
   596  042F  3101               	addfsr 0,1
   597  0430  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   598  0431  2C2E               	goto	clrloop0	;have we reached the end yet?
   599  0432  3400               	retlw	0	;all done for this memory range, return
   600                           
   601                           	psect	cstackCOMMON
   602  0070                     __pcstackCOMMON:	
   603  0070                     ?_init_pic:	
   604  0070                     ?_init_pwm:	
   605                           ; 1 bytes @ 0x0
   606                           
   607  0070                     ?_solidCol:	
   608                           ; 1 bytes @ 0x0
   609                           
   610  0070                     ?_Sleep:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  0070                     ?_my_isr:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0070                     ??_my_isr:	
   617                           ; 1 bytes @ 0x0
   618                           
   619  0070                     ?_VddCheck:	
   620                           ; 1 bytes @ 0x0
   621                           
   622  0070                     ?_main:	
   623                           ; 1 bytes @ 0x0
   624                           
   625                           
   626                           ; 2 bytes @ 0x0
   627  0070                     	ds	2
   628  0072                     ??_init_pic:	
   629  0072                     ??_init_pwm:	
   630                           ; 1 bytes @ 0x2
   631                           
   632  0072                     ?___lmul:	
   633                           ; 1 bytes @ 0x2
   634                           
   635  0072                     ___lmul@multiplier:	
   636                           ; 4 bytes @ 0x2
   637                           
   638                           
   639                           ; 4 bytes @ 0x2
   640  0072                     	ds	4
   641  0076                     ___lmul@multiplicand:	
   642                           
   643                           ; 4 bytes @ 0x6
   644  0076                     	ds	4
   645  007A                     ??___lmul:	
   646  007A                     ??___aldiv:	
   647                           ; 1 bytes @ 0xA
   648                           
   649                           
   650                           ; 1 bytes @ 0xA
   651  007A                     	ds	1
   652  007B                     ??_main:	
   653                           
   654                           	psect	cstackBANK0
   655  0020                     __pcstackBANK0:	
   656                           ; 1 bytes @ 0xB
   657                           
   658  0020                     ___lmul@product:	
   659                           
   660                           ; 4 bytes @ 0x0
   661  0020                     	ds	4
   662  0024                     ?___aldiv:	
   663  0024                     ___aldiv@divisor:	
   664                           ; 4 bytes @ 0x4
   665                           
   666                           
   667                           ; 4 bytes @ 0x4
   668  0024                     	ds	4
   669  0028                     ___aldiv@dividend:	
   670                           
   671                           ; 4 bytes @ 0x8
   672  0028                     	ds	4
   673  002C                     ___aldiv@counter:	
   674                           
   675                           ; 1 bytes @ 0xC
   676  002C                     	ds	1
   677  002D                     ___aldiv@sign:	
   678                           
   679                           ; 1 bytes @ 0xD
   680  002D                     	ds	1
   681  002E                     ___aldiv@quotient:	
   682                           
   683                           ; 4 bytes @ 0xE
   684  002E                     	ds	4
   685  0032                     ??_solidCol:	
   686                           
   687                           ; 1 bytes @ 0x12
   688  0032                     	ds	2
   689  0034                     solidCol@R:	
   690                           
   691                           ; 4 bytes @ 0x14
   692  0034                     	ds	4
   693  0038                     solidCol@G:	
   694                           
   695                           ; 4 bytes @ 0x18
   696  0038                     	ds	4
   697  003C                     solidCol@B:	
   698                           
   699                           ; 4 bytes @ 0x1C
   700  003C                     	ds	4
   701  0040                     solidCol@colour:	
   702                           
   703                           ; 1 bytes @ 0x20
   704  0040                     	ds	1
   705  0041                     ??_Sleep:	
   706                           
   707                           ; 1 bytes @ 0x21
   708  0041                     	ds	2
   709  0043                     ?_delay_ms:	
   710  0043                     delay_ms@microseconds:	
   711                           ; 1 bytes @ 0x23
   712                           
   713                           
   714                           ; 2 bytes @ 0x23
   715  0043                     	ds	2
   716  0045                     ??_delay_ms:	
   717                           
   718                           ; 1 bytes @ 0x25
   719  0045                     	ds	1
   720  0046                     ??_VddCheck:	
   721                           
   722                           ; 1 bytes @ 0x26
   723  0046                     	ds	2
   724                           
   725                           	psect	maintext
   726  0374                     __pmaintext:	
   727 ;;
   728 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   729 ;;
   730 ;; *************** function _main *****************
   731 ;; Defined at:
   732 ;;		line 407 in file "blockzUSB.c"
   733 ;; Parameters:    Size  Location     Type
   734 ;;		None
   735 ;; Auto vars:     Size  Location     Type
   736 ;;		None
   737 ;; Return value:  Size  Location     Type
   738 ;;                  2  247[None  ] int 
   739 ;; Registers used:
   740 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   741 ;; Tracked objects:
   742 ;;		On entry : B1F/0
   743 ;;		On exit  : 0/0
   744 ;;		Unchanged: 0/0
   745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   746 ;;      Params:         0       0       0       0
   747 ;;      Locals:         0       0       0       0
   748 ;;      Temps:          0       0       0       0
   749 ;;      Totals:         0       0       0       0
   750 ;;Total ram usage:        0 bytes
   751 ;; Hardware stack levels required when called:    6
   752 ;; This function calls:
   753 ;;		_VddCheck
   754 ;;		_delay_ms
   755 ;;		_init_pic
   756 ;;		_init_pwm
   757 ;;		_solidCol
   758 ;; This function is called by:
   759 ;;		Startup code after reset
   760 ;; This function uses a non-reentrant model
   761 ;;
   762                           
   763                           
   764                           ;psect for function _main
   765  0374                     _main:	
   766                           
   767                           ;blockzUSB.c: 409:     init_pic();
   768                           
   769                           ;incstack = 0
   770                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   771  0374  23F2               	fcall	_init_pic
   772                           
   773                           ;blockzUSB.c: 410:     init_pwm();
   774  0375  22B6               	fcall	_init_pwm
   775                           
   776                           ;blockzUSB.c: 411:     VddCheck();
   777  0376  23CA               	fcall	_VddCheck
   778                           
   779                           ;blockzUSB.c: 413:     solidCol(white);
   780  0377  30DC               	movlw	(low (_white| 0))& (0+255)
   781  0378  20EB               	fcall	_solidCol
   782                           
   783                           ;blockzUSB.c: 414:     delay_ms(1000);
   784  0379  30E8               	movlw	232
   785  037A  0020               	movlb	0	; select bank0
   786  037B  00C3               	movwf	delay_ms@microseconds
   787  037C  3003               	movlw	3
   788  037D  00C4               	movwf	delay_ms@microseconds+1
   789  037E  23A0               	fcall	_delay_ms
   790                           
   791                           ;blockzUSB.c: 415:     solidCol(orange);
   792  037F  30D0               	movlw	(low (_orange| 0))& (0+255)
   793  0380  20EB               	fcall	_solidCol
   794                           
   795                           ;blockzUSB.c: 416:     delay_ms(1000);
   796  0381  30E8               	movlw	232
   797  0382  0020               	movlb	0	; select bank0
   798  0383  00C3               	movwf	delay_ms@microseconds
   799  0384  3003               	movlw	3
   800  0385  00C4               	movwf	delay_ms@microseconds+1
   801  0386  23A0               	fcall	_delay_ms
   802                           
   803                           ;blockzUSB.c: 417:     solidCol(red);
   804  0387  30D6               	movlw	(low (_red| 0))& (0+255)
   805  0388  20EB               	fcall	_solidCol
   806                           
   807                           ;blockzUSB.c: 418:     delay_ms(1000);
   808  0389  30E8               	movlw	232
   809  038A  0020               	movlb	0	; select bank0
   810  038B  00C3               	movwf	delay_ms@microseconds
   811  038C  3003               	movlw	3
   812  038D  00C4               	movwf	delay_ms@microseconds+1
   813  038E  23A0               	fcall	_delay_ms
   814                           
   815                           ;blockzUSB.c: 419:     solidCol(lime);
   816  038F  30C4               	movlw	(low (_lime| 0))& (0+255)
   817  0390  20EB               	fcall	_solidCol
   818                           
   819                           ;blockzUSB.c: 420:     delay_ms(1000);
   820  0391  30E8               	movlw	232
   821  0392  0020               	movlb	0	; select bank0
   822  0393  00C3               	movwf	delay_ms@microseconds
   823  0394  3003               	movlw	3
   824  0395  00C4               	movwf	delay_ms@microseconds+1
   825  0396  23A0               	fcall	_delay_ms
   826                           
   827                           ;blockzUSB.c: 421:     solidCol(purple);
   828  0397  30CA               	movlw	(low (_purple| 0))& (0+255)
   829  0398  20EB               	fcall	_solidCol
   830                           
   831                           ;blockzUSB.c: 422:     delay_ms(1000);
   832  0399  30E8               	movlw	232
   833  039A  0020               	movlb	0	; select bank0
   834  039B  00C3               	movwf	delay_ms@microseconds
   835  039C  3003               	movlw	3
   836  039D  00C4               	movwf	delay_ms@microseconds+1
   837  039E  23A0               	fcall	_delay_ms
   838  039F  28BB               	ljmp	start
   839  03A0                     __end_of_main:	
   840                           
   841                           	psect	text1
   842  02B6                     __ptext1:	
   843 ;; *************** function _init_pwm *****************
   844 ;; Defined at:
   845 ;;		line 133 in file "blockzUSB.c"
   846 ;; Parameters:    Size  Location     Type
   847 ;;		None
   848 ;; Auto vars:     Size  Location     Type
   849 ;;		None
   850 ;; Return value:  Size  Location     Type
   851 ;;                  1    wreg      void 
   852 ;; Registers used:
   853 ;;		wreg, status,2
   854 ;; Tracked objects:
   855 ;;		On entry : 0/0
   856 ;;		On exit  : 0/0
   857 ;;		Unchanged: 0/0
   858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   859 ;;      Params:         0       0       0       0
   860 ;;      Locals:         0       0       0       0
   861 ;;      Temps:          0       0       0       0
   862 ;;      Totals:         0       0       0       0
   863 ;;Total ram usage:        0 bytes
   864 ;; Hardware stack levels used:    1
   865 ;; Hardware stack levels required when called:    1
   866 ;; This function calls:
   867 ;;		Nothing
   868 ;; This function is called by:
   869 ;;		_main
   870 ;; This function uses a non-reentrant model
   871 ;;
   872                           
   873                           
   874                           ;psect for function _init_pwm
   875  02B6                     _init_pwm:	
   876                           
   877                           ;blockzUSB.c: 135:     PWM1CLKCON = 0x01;
   878                           
   879                           ;incstack = 0
   880                           ; Regs used in _init_pwm: [wreg+status,2]
   881  02B6  3001               	movlw	1
   882  02B7  003B               	movlb	27	; select bank27
   883  02B8  009E               	movwf	30	;volatile
   884                           
   885                           ;blockzUSB.c: 136:     PWM1PH = 0;
   886  02B9  0191               	clrf	17	;volatile
   887  02BA  0192               	clrf	18	;volatile
   888                           
   889                           ;blockzUSB.c: 137:     PWM1DC = 0;
   890  02BB  0193               	clrf	19	;volatile
   891  02BC  0194               	clrf	20	;volatile
   892                           
   893                           ;blockzUSB.c: 138:     PWM1PR = 32768;
   894  02BD  3080               	movlw	128
   895  02BE  0096               	movwf	22	;volatile
   896  02BF  3000               	movlw	0
   897  02C0  0095               	movwf	21	;volatile
   898                           
   899                           ;blockzUSB.c: 139:     PWM1CON = 0b11000000;
   900  02C1  30C0               	movlw	192
   901  02C2  009B               	movwf	27	;volatile
   902                           
   903                           ;blockzUSB.c: 141:     PWM2CLKCON = 0x01;
   904  02C3  3001               	movlw	1
   905  02C4  00AE               	movwf	46	;volatile
   906                           
   907                           ;blockzUSB.c: 142:     PWM2PH = 0;
   908  02C5  01A1               	clrf	33	;volatile
   909  02C6  01A2               	clrf	34	;volatile
   910                           
   911                           ;blockzUSB.c: 143:     PWM2DC = 0;
   912  02C7  01A3               	clrf	35	;volatile
   913  02C8  01A4               	clrf	36	;volatile
   914                           
   915                           ;blockzUSB.c: 144:     PWM2PR = 32768;
   916  02C9  3080               	movlw	128
   917  02CA  00A6               	movwf	38	;volatile
   918  02CB  3000               	movlw	0
   919  02CC  00A5               	movwf	37	;volatile
   920                           
   921                           ;blockzUSB.c: 145:     PWM2CON = 0b11000000;
   922  02CD  30C0               	movlw	192
   923  02CE  00AB               	movwf	43	;volatile
   924                           
   925                           ;blockzUSB.c: 147:     PWM3CLKCON = 0x01;
   926  02CF  3001               	movlw	1
   927  02D0  00BE               	movwf	62	;volatile
   928                           
   929                           ;blockzUSB.c: 148:     PWM3PH = 0;
   930  02D1  01B1               	clrf	49	;volatile
   931  02D2  01B2               	clrf	50	;volatile
   932                           
   933                           ;blockzUSB.c: 149:     PWM3DC = 0;
   934  02D3  01B3               	clrf	51	;volatile
   935  02D4  01B4               	clrf	52	;volatile
   936                           
   937                           ;blockzUSB.c: 150:     PWM3PR = 32768;
   938  02D5  3080               	movlw	128
   939  02D6  00B6               	movwf	54	;volatile
   940  02D7  3000               	movlw	0
   941  02D8  00B5               	movwf	53	;volatile
   942                           
   943                           ;blockzUSB.c: 151:     PWM3CON = 0b11000000;
   944  02D9  30C0               	movlw	192
   945  02DA  00BB               	movwf	59	;volatile
   946                           
   947                           ;blockzUSB.c: 153:     redVal = black[0];
   948  02DB  0020               	movlb	0	; select bank0
   949  02DC  085B               	movf	_black+1,w
   950  02DD  00EF               	movwf	_redVal+1
   951  02DE  085A               	movf	_black,w
   952  02DF  00EE               	movwf	_redVal
   953                           
   954                           ;blockzUSB.c: 154:     greenVal = black[1];
   955  02E0  085D               	movf	_black+3,w
   956  02E1  00ED               	movwf	_greenVal+1
   957  02E2  085C               	movf	_black+2,w
   958  02E3  00EC               	movwf	_greenVal
   959                           
   960                           ;blockzUSB.c: 155:     blueVal = black[2];
   961  02E4  085F               	movf	_black+5,w
   962  02E5  00EB               	movwf	_blueVal+1
   963  02E6  085E               	movf	_black+4,w
   964  02E7  00EA               	movwf	_blueVal
   965                           
   966                           ;blockzUSB.c: 157:     prevR = redVal;
   967  02E8  086F               	movf	_redVal+1,w
   968  02E9  0021               	movlb	1	; select bank1
   969  02EA  00E7               	movwf	(_prevR+1)^(0+128)
   970  02EB  0020               	movlb	0	; select bank0
   971  02EC  086E               	movf	_redVal,w
   972  02ED  0021               	movlb	1	; select bank1
   973  02EE  00E6               	movwf	_prevR^(0+128)
   974                           
   975                           ;blockzUSB.c: 158:     prevG = greenVal;
   976  02EF  0020               	movlb	0	; select bank0
   977  02F0  086D               	movf	_greenVal+1,w
   978  02F1  0021               	movlb	1	; select bank1
   979  02F2  00E5               	movwf	(_prevG+1)^(0+128)
   980  02F3  0020               	movlb	0	; select bank0
   981  02F4  086C               	movf	_greenVal,w
   982  02F5  0021               	movlb	1	; select bank1
   983  02F6  00E4               	movwf	_prevG^(0+128)
   984                           
   985                           ;blockzUSB.c: 159:     prevB = blueVal;
   986  02F7  0020               	movlb	0	; select bank0
   987  02F8  086B               	movf	_blueVal+1,w
   988  02F9  0021               	movlb	1	; select bank1
   989  02FA  00E3               	movwf	(_prevB+1)^(0+128)
   990  02FB  0020               	movlb	0	; select bank0
   991  02FC  086A               	movf	_blueVal,w
   992  02FD  0021               	movlb	1	; select bank1
   993  02FE  00E2               	movwf	_prevB^(0+128)
   994  02FF  0008               	return
   995  0300                     __end_of_init_pwm:	
   996                           
   997                           	psect	text2
   998  03F2                     __ptext2:	
   999 ;; *************** function _init_pic *****************
  1000 ;; Defined at:
  1001 ;;		line 101 in file "blockzUSB.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;		None
  1004 ;; Auto vars:     Size  Location     Type
  1005 ;;		None
  1006 ;; Return value:  Size  Location     Type
  1007 ;;                  1    wreg      void 
  1008 ;; Registers used:
  1009 ;;		wreg, status,2
  1010 ;; Tracked objects:
  1011 ;;		On entry : 0/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1015 ;;      Params:         0       0       0       0
  1016 ;;      Locals:         0       0       0       0
  1017 ;;      Temps:          0       0       0       0
  1018 ;;      Totals:         0       0       0       0
  1019 ;;Total ram usage:        0 bytes
  1020 ;; Hardware stack levels used:    1
  1021 ;; Hardware stack levels required when called:    1
  1022 ;; This function calls:
  1023 ;;		Nothing
  1024 ;; This function is called by:
  1025 ;;		_main
  1026 ;; This function uses a non-reentrant model
  1027 ;;
  1028                           
  1029                           
  1030                           ;psect for function _init_pic
  1031  03F2                     _init_pic:	
  1032                           
  1033                           ;blockzUSB.c: 102:     WDTCON = 0;
  1034                           
  1035                           ;incstack = 0
  1036                           ; Regs used in _init_pic: [wreg+status,2]
  1037  03F2  0021               	movlb	1	; select bank1
  1038  03F3  0197               	clrf	23	;volatile
  1039                           
  1040                           ;blockzUSB.c: 103:     OSCCON = 0b01111010;
  1041  03F4  307A               	movlw	122
  1042  03F5  0099               	movwf	25	;volatile
  1043                           
  1044                           ;blockzUSB.c: 104:     ANSELA = 0;
  1045  03F6  0023               	movlb	3	; select bank3
  1046  03F7  018C               	clrf	12	;volatile
  1047                           
  1048                           ;blockzUSB.c: 105:     LATA = 0;
  1049  03F8  0022               	movlb	2	; select bank2
  1050  03F9  018C               	clrf	12	;volatile
  1051                           
  1052                           ;blockzUSB.c: 108:     TRISA5 = 0;
  1053  03FA  0021               	movlb	1	; select bank1
  1054  03FB  128C               	bcf	12,5	;volatile
  1055                           
  1056                           ;blockzUSB.c: 109:     TRISA2 = 0;
  1057  03FC  110C               	bcf	12,2	;volatile
  1058                           
  1059                           ;blockzUSB.c: 110:     TRISA1 = 0;
  1060  03FD  108C               	bcf	12,1	;volatile
  1061                           
  1062                           ;blockzUSB.c: 111:     TRISA0 = 0;
  1063  03FE  100C               	bcf	12,0	;volatile
  1064                           
  1065                           ;blockzUSB.c: 114:     TRISA3 = 1;
  1066  03FF  158C               	bsf	12,3	;volatile
  1067                           
  1068                           ;blockzUSB.c: 115:     TRISA4 = 1;
  1069  0400  160C               	bsf	12,4	;volatile
  1070                           
  1071                           ;blockzUSB.c: 118:     WPUA3 = 1;
  1072  0401  0024               	movlb	4	; select bank4
  1073  0402  158C               	bsf	12,3	;volatile
  1074                           
  1075                           ;blockzUSB.c: 119:     WPUA4 = 1;
  1076  0403  160C               	bsf	12,4	;volatile
  1077                           
  1078                           ;blockzUSB.c: 121:     OPTION_REG = 0b00000101;
  1079  0404  3005               	movlw	5
  1080  0405  0021               	movlb	1	; select bank1
  1081  0406  0095               	movwf	21	;volatile
  1082                           
  1083                           ;blockzUSB.c: 122:     INTCON = 0b11100000;
  1084  0407  30E0               	movlw	224
  1085  0408  008B               	movwf	11	;volatile
  1086                           
  1087                           ;blockzUSB.c: 123:     VREGCON = 1;
  1088  0409  3001               	movlw	1
  1089  040A  0023               	movlb	3	; select bank3
  1090  040B  0097               	movwf	23	;volatile
  1091                           
  1092                           ;blockzUSB.c: 125:     FVRCON = 0b11000001;
  1093  040C  30C1               	movlw	193
  1094  040D  0022               	movlb	2	; select bank2
  1095  040E  0097               	movwf	23	;volatile
  1096                           
  1097                           ;blockzUSB.c: 126:     ADCON0 = 0b01111101;
  1098  040F  307D               	movlw	125
  1099  0410  0021               	movlb	1	; select bank1
  1100  0411  009D               	movwf	29	;volatile
  1101                           
  1102                           ;blockzUSB.c: 127:     ADCON1 = 0b01110000;
  1103  0412  3070               	movlw	112
  1104  0413  009E               	movwf	30	;volatile
  1105                           
  1106                           ;blockzUSB.c: 129:     RA5 = 1 ;
  1107  0414  0020               	movlb	0	; select bank0
  1108  0415  168C               	bsf	12,5	;volatile
  1109  0416  0008               	return
  1110  0417                     __end_of_init_pic:	
  1111                           
  1112                           	psect	text3
  1113  03CA                     __ptext3:	
  1114 ;; *************** function _VddCheck *****************
  1115 ;; Defined at:
  1116 ;;		line 389 in file "blockzUSB.c"
  1117 ;; Parameters:    Size  Location     Type
  1118 ;;		None
  1119 ;; Auto vars:     Size  Location     Type
  1120 ;;		None
  1121 ;; Return value:  Size  Location     Type
  1122 ;;                  1    wreg      void 
  1123 ;; Registers used:
  1124 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1125 ;; Tracked objects:
  1126 ;;		On entry : 0/0
  1127 ;;		On exit  : 0/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1130 ;;      Params:         0       0       0       0
  1131 ;;      Locals:         0       0       0       0
  1132 ;;      Temps:          0       2       0       0
  1133 ;;      Totals:         0       2       0       0
  1134 ;;Total ram usage:        2 bytes
  1135 ;; Hardware stack levels used:    1
  1136 ;; Hardware stack levels required when called:    5
  1137 ;; This function calls:
  1138 ;;		_Sleep
  1139 ;;		_delay_ms
  1140 ;; This function is called by:
  1141 ;;		_main
  1142 ;; This function uses a non-reentrant model
  1143 ;;
  1144                           
  1145                           
  1146                           ;psect for function _VddCheck
  1147  03CA                     _VddCheck:	
  1148                           
  1149                           ;blockzUSB.c: 390:     delay_ms(100);
  1150                           
  1151                           ;incstack = 0
  1152                           ; Regs used in _VddCheck: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1153  03CA  3064               	movlw	100
  1154  03CB  0020               	movlb	0	; select bank0
  1155  03CC  00C3               	movwf	delay_ms@microseconds
  1156  03CD  3000               	movlw	0
  1157  03CE  00C4               	movwf	delay_ms@microseconds+1
  1158  03CF  23A0               	fcall	_delay_ms
  1159                           
  1160                           ;blockzUSB.c: 391:     ADCON0bits.GO = 1;
  1161  03D0  0021               	movlb	1	; select bank1
  1162  03D1  149D               	bsf	29,1	;volatile
  1163  03D2                     l238:	
  1164                           ;blockzUSB.c: 393:         ;
  1165                           
  1166                           
  1167                           ;blockzUSB.c: 392:     while(ADCON0bits.GO)
  1168  03D2  189D               	btfsc	29,1	;volatile
  1169  03D3  2BD2               	goto	l238
  1170                           
  1171                           ;blockzUSB.c: 395:     adcVal = ADRESH;
  1172  03D4  081C               	movf	28,w	;volatile
  1173  03D5  0020               	movlb	0	; select bank0
  1174  03D6  00C6               	movwf	??_VddCheck
  1175  03D7  01C7               	clrf	??_VddCheck+1
  1176  03D8  0846               	movf	??_VddCheck,w
  1177  03D9  00CE               	movwf	_adcVal
  1178  03DA  0847               	movf	??_VddCheck+1,w
  1179  03DB  00CF               	movwf	_adcVal+1
  1180                           
  1181                           ;blockzUSB.c: 397:     if(adcVal >= 73 && lowPowerReset == 1){
  1182  03DC  084F               	movf	_adcVal+1,w
  1183  03DD  3A80               	xorlw	128
  1184  03DE  00C6               	movwf	??_VddCheck
  1185  03DF  3080               	movlw	128
  1186  03E0  0246               	subwf	??_VddCheck,w
  1187  03E1  1D03               	skipz
  1188  03E2  2BE5               	goto	u1175
  1189  03E3  3049               	movlw	73
  1190  03E4  024E               	subwf	_adcVal,w
  1191  03E5                     u1175:	
  1192  03E5  1C03               	skipc
  1193  03E6  2BEE               	goto	l1626
  1194  03E7  0020               	movlb	0	; select bank0
  1195  03E8  0360               	decf	_lowPowerReset,w
  1196  03E9  0461               	iorwf	_lowPowerReset+1,w
  1197  03EA  1D03               	btfss	3,2
  1198  03EB  2BEE               	goto	l1626
  1199                           
  1200                           ;blockzUSB.c: 400:         Sleep();
  1201  03EC  2244               	fcall	_Sleep
  1202                           
  1203                           ;blockzUSB.c: 401:     }
  1204  03ED  0008               	return
  1205  03EE                     l1626:	
  1206                           
  1207                           ;blockzUSB.c: 403:         lowPowerReset = 0;
  1208  03EE  0020               	movlb	0	; select bank0
  1209  03EF  01E0               	clrf	_lowPowerReset
  1210  03F0  01E1               	clrf	_lowPowerReset+1
  1211  03F1  0008               	return
  1212  03F2                     __end_of_VddCheck:	
  1213                           
  1214                           	psect	text4
  1215  03A0                     __ptext4:	
  1216 ;; *************** function _delay_ms *****************
  1217 ;; Defined at:
  1218 ;;		line 218 in file "blockzUSB.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;  microseconds    2   35[BANK0 ] int 
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;		None
  1223 ;; Return value:  Size  Location     Type
  1224 ;;                  1    wreg      void 
  1225 ;; Registers used:
  1226 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1227 ;; Tracked objects:
  1228 ;;		On entry : 0/0
  1229 ;;		On exit  : 0/0
  1230 ;;		Unchanged: 0/0
  1231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1232 ;;      Params:         0       2       0       0
  1233 ;;      Locals:         0       0       0       0
  1234 ;;      Temps:          0       1       0       0
  1235 ;;      Totals:         0       3       0       0
  1236 ;;Total ram usage:        3 bytes
  1237 ;; Hardware stack levels used:    1
  1238 ;; Hardware stack levels required when called:    4
  1239 ;; This function calls:
  1240 ;;		_Sleep
  1241 ;; This function is called by:
  1242 ;;		_VddCheck
  1243 ;;		_main
  1244 ;;		_crossFade
  1245 ;; This function uses a non-reentrant model
  1246 ;;
  1247                           
  1248                           
  1249                           ;psect for function _delay_ms
  1250  03A0                     _delay_ms:	
  1251  03A0                     l184:	
  1252                           ;blockzUSB.c: 228:     }
  1253                           
  1254                           ;blockzUSB.c: 219:     while(microseconds > 0){
  1255                           
  1256                           ;incstack = 0
  1257                           ; Regs used in _delay_ms: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1258                           
  1259                           
  1260                           ;blockzUSB.c: 219:     while(microseconds > 0){
  1261  03A0  0020               	movlb	0	; select bank0
  1262  03A1  0844               	movf	delay_ms@microseconds+1,w
  1263  03A2  3A80               	xorlw	128
  1264  03A3  00C5               	movwf	??_delay_ms
  1265  03A4  3080               	movlw	128
  1266  03A5  0245               	subwf	??_delay_ms,w
  1267  03A6  1D03               	skipz
  1268  03A7  2BAA               	goto	u1155
  1269  03A8  3001               	movlw	1
  1270  03A9  0243               	subwf	delay_ms@microseconds,w
  1271  03AA                     u1155:	
  1272  03AA  1C03               	btfss	3,0
  1273  03AB  0008               	return
  1274                           
  1275                           ;blockzUSB.c: 220:         if(callSleep == 1 && inSleep == 0){
  1276  03AC  0020               	movlb	0	; select bank0
  1277  03AD  034A               	decf	_callSleep,w
  1278  03AE  044B               	iorwf	_callSleep+1,w
  1279  03AF  1D03               	btfss	3,2
  1280  03B0  2BB6               	goto	l1610
  1281  03B1  084C               	movf	_inSleep,w
  1282  03B2  044D               	iorwf	_inSleep+1,w
  1283  03B3  1D03               	btfss	3,2
  1284  03B4  2BB6               	goto	l1610
  1285                           
  1286                           ;blockzUSB.c: 221:             Sleep();
  1287  03B5  2244               	fcall	_Sleep
  1288  03B6                     l1610:	
  1289                           
  1290                           ;blockzUSB.c: 223:             if(skipColour == 1){
  1291  03B6  0020               	movlb	0	; select bank0
  1292  03B7  0364               	decf	_skipColour,w
  1293  03B8  0465               	iorwf	_skipColour+1,w
  1294  03B9  1903               	btfsc	3,2
  1295  03BA  0008               	return
  1296                           
  1297                           ;blockzUSB.c: 226:         _delay((unsigned long)((1)*(16000000/4000.0)));
  1298  03BB  3006               	movlw	6
  1299  03BC  0020               	movlb	0	; select bank0
  1300  03BD  00C5               	movwf	??_delay_ms
  1301  03BE  3030               	movlw	48
  1302  03BF                     u1247:	
  1303  03BF  0B89               	decfsz	9,f
  1304  03C0  2BBF               	goto	u1247
  1305  03C1  0BC5               	decfsz	??_delay_ms,f
  1306  03C2  2BBF               	goto	u1247
  1307  03C3  0000               	nop
  1308                           
  1309                           ;blockzUSB.c: 227:         microseconds--;
  1310  03C4  30FF               	movlw	255
  1311  03C5  0020               	movlb	0	; select bank0
  1312  03C6  07C3               	addwf	delay_ms@microseconds,f
  1313  03C7  30FF               	movlw	255
  1314  03C8  3DC4               	addwfc	delay_ms@microseconds+1,f
  1315  03C9  2BA0               	goto	l184
  1316  03CA                     __end_of_delay_ms:	
  1317                           
  1318                           	psect	text5
  1319  0244                     __ptext5:	
  1320 ;; *************** function _Sleep *****************
  1321 ;; Defined at:
  1322 ;;		line 189 in file "blockzUSB.c"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;		None
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;		None
  1327 ;; Return value:  Size  Location     Type
  1328 ;;                  1    wreg      void 
  1329 ;; Registers used:
  1330 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1331 ;; Tracked objects:
  1332 ;;		On entry : 0/0
  1333 ;;		On exit  : 0/0
  1334 ;;		Unchanged: 0/0
  1335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1336 ;;      Params:         0       0       0       0
  1337 ;;      Locals:         0       0       0       0
  1338 ;;      Temps:          0       2       0       0
  1339 ;;      Totals:         0       2       0       0
  1340 ;;Total ram usage:        2 bytes
  1341 ;; Hardware stack levels used:    1
  1342 ;; Hardware stack levels required when called:    3
  1343 ;; This function calls:
  1344 ;;		_solidCol
  1345 ;; This function is called by:
  1346 ;;		_delay_ms
  1347 ;;		_VddCheck
  1348 ;; This function uses a non-reentrant model
  1349 ;;
  1350                           
  1351                           
  1352                           ;psect for function _Sleep
  1353  0244                     _Sleep:	
  1354                           
  1355                           ;blockzUSB.c: 190:     inSleep = 1;
  1356                           
  1357                           ;incstack = 0
  1358                           ; Regs used in _Sleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1359  0244  3001               	movlw	1
  1360  0245  0020               	movlb	0	; select bank0
  1361  0246  00CC               	movwf	_inSleep
  1362  0247  3000               	movlw	0
  1363  0248  00CD               	movwf	_inSleep+1
  1364                           
  1365                           ;blockzUSB.c: 192:     solidCol(red);
  1366  0249  30D6               	movlw	(low (_red| 0))& (0+255)
  1367  024A  20EB               	fcall	_solidCol
  1368                           
  1369                           ;blockzUSB.c: 193:     _delay((unsigned long)((500)*(16000000/4000.0)));
  1370  024B  300B               	movlw	11
  1371  024C  0020               	movlb	0	; select bank0
  1372  024D  00C2               	movwf	??_Sleep+1
  1373  024E  3026               	movlw	38
  1374  024F  00C1               	movwf	??_Sleep
  1375  0250  305D               	movlw	93
  1376  0251                     u1257:	
  1377  0251  0B89               	decfsz	9,f
  1378  0252  2A51               	goto	u1257
  1379  0253  0BC1               	decfsz	??_Sleep,f
  1380  0254  2A51               	goto	u1257
  1381  0255  0BC2               	decfsz	??_Sleep+1,f
  1382  0256  2A51               	goto	u1257
  1383  0257  3200               	nop2
  1384                           
  1385                           ;blockzUSB.c: 194:     solidCol(black);
  1386  0258  305A               	movlw	(low (_black| 0))& (0+255)
  1387  0259  20EB               	fcall	_solidCol
  1388                           
  1389                           ;blockzUSB.c: 195:     _delay((unsigned long)((250)*(16000000/4000.0)));
  1390  025A  3006               	movlw	6
  1391  025B  0020               	movlb	0	; select bank0
  1392  025C  00C2               	movwf	??_Sleep+1
  1393  025D  3013               	movlw	19
  1394  025E  00C1               	movwf	??_Sleep
  1395  025F  30AD               	movlw	173
  1396  0260                     u1267:	
  1397  0260  0B89               	decfsz	9,f
  1398  0261  2A60               	goto	u1267
  1399  0262  0BC1               	decfsz	??_Sleep,f
  1400  0263  2A60               	goto	u1267
  1401  0264  0BC2               	decfsz	??_Sleep+1,f
  1402  0265  2A60               	goto	u1267
  1403  0266  3200               	nop2
  1404                           
  1405                           ;blockzUSB.c: 196:     solidCol(red);
  1406  0267  30D6               	movlw	(low (_red| 0))& (0+255)
  1407  0268  20EB               	fcall	_solidCol
  1408                           
  1409                           ;blockzUSB.c: 197:     _delay((unsigned long)((500)*(16000000/4000.0)));
  1410  0269  300B               	movlw	11
  1411  026A  0020               	movlb	0	; select bank0
  1412  026B  00C2               	movwf	??_Sleep+1
  1413  026C  3026               	movlw	38
  1414  026D  00C1               	movwf	??_Sleep
  1415  026E  305D               	movlw	93
  1416  026F                     u1277:	
  1417  026F  0B89               	decfsz	9,f
  1418  0270  2A6F               	goto	u1277
  1419  0271  0BC1               	decfsz	??_Sleep,f
  1420  0272  2A6F               	goto	u1277
  1421  0273  0BC2               	decfsz	??_Sleep+1,f
  1422  0274  2A6F               	goto	u1277
  1423  0275  3200               	nop2
  1424                           
  1425                           ;blockzUSB.c: 198:     solidCol(black);
  1426  0276  305A               	movlw	(low (_black| 0))& (0+255)
  1427  0277  20EB               	fcall	_solidCol
  1428                           
  1429                           ;blockzUSB.c: 199:     _delay((unsigned long)((250)*(16000000/4000.0)));
  1430  0278  3006               	movlw	6
  1431  0279  0020               	movlb	0	; select bank0
  1432  027A  00C2               	movwf	??_Sleep+1
  1433  027B  3013               	movlw	19
  1434  027C  00C1               	movwf	??_Sleep
  1435  027D  30AD               	movlw	173
  1436  027E                     u1287:	
  1437  027E  0B89               	decfsz	9,f
  1438  027F  2A7E               	goto	u1287
  1439  0280  0BC1               	decfsz	??_Sleep,f
  1440  0281  2A7E               	goto	u1287
  1441  0282  0BC2               	decfsz	??_Sleep+1,f
  1442  0283  2A7E               	goto	u1287
  1443  0284  3200               	nop2
  1444                           
  1445                           ;blockzUSB.c: 200:     solidCol(red);
  1446  0285  30D6               	movlw	(low (_red| 0))& (0+255)
  1447  0286  20EB               	fcall	_solidCol
  1448                           
  1449                           ;blockzUSB.c: 201:     _delay((unsigned long)((500)*(16000000/4000.0)));
  1450  0287  300B               	movlw	11
  1451  0288  0020               	movlb	0	; select bank0
  1452  0289  00C2               	movwf	??_Sleep+1
  1453  028A  3026               	movlw	38
  1454  028B  00C1               	movwf	??_Sleep
  1455  028C  305D               	movlw	93
  1456  028D                     u1297:	
  1457  028D  0B89               	decfsz	9,f
  1458  028E  2A8D               	goto	u1297
  1459  028F  0BC1               	decfsz	??_Sleep,f
  1460  0290  2A8D               	goto	u1297
  1461  0291  0BC2               	decfsz	??_Sleep+1,f
  1462  0292  2A8D               	goto	u1297
  1463  0293  3200               	nop2
  1464                           
  1465                           ;blockzUSB.c: 202:     solidCol(black);
  1466  0294  305A               	movlw	(low (_black| 0))& (0+255)
  1467  0295  20EB               	fcall	_solidCol
  1468                           
  1469                           ;blockzUSB.c: 203:     _delay((unsigned long)((250)*(16000000/4000.0)));
  1470  0296  3006               	movlw	6
  1471  0297  0020               	movlb	0	; select bank0
  1472  0298  00C2               	movwf	??_Sleep+1
  1473  0299  3013               	movlw	19
  1474  029A  00C1               	movwf	??_Sleep
  1475  029B  30AD               	movlw	173
  1476  029C                     u1307:	
  1477  029C  0B89               	decfsz	9,f
  1478  029D  2A9C               	goto	u1307
  1479  029E  0BC1               	decfsz	??_Sleep,f
  1480  029F  2A9C               	goto	u1307
  1481  02A0  0BC2               	decfsz	??_Sleep+1,f
  1482  02A1  2A9C               	goto	u1307
  1483  02A2  3200               	nop2
  1484                           
  1485                           ;blockzUSB.c: 205:     inSleep = 0;
  1486  02A3  0020               	movlb	0	; select bank0
  1487  02A4  01CC               	clrf	_inSleep
  1488  02A5  01CD               	clrf	_inSleep+1
  1489                           
  1490                           ;blockzUSB.c: 206:     callSleep = 0;
  1491  02A6  01CA               	clrf	_callSleep
  1492  02A7  01CB               	clrf	_callSleep+1
  1493                           
  1494                           ;blockzUSB.c: 207:     TRISA = 0;
  1495  02A8  0021               	movlb	1	; select bank1
  1496  02A9  018C               	clrf	12	;volatile
  1497                           
  1498                           ;blockzUSB.c: 208:     PORTA = 0;
  1499  02AA  0020               	movlb	0	; select bank0
  1500  02AB  018C               	clrf	12	;volatile
  1501                           
  1502                           ;blockzUSB.c: 209:     INTCON = 0;
  1503  02AC  018B               	clrf	11	;volatile
  1504                           
  1505                           ;blockzUSB.c: 210:     OPTION_REG = 0;
  1506  02AD  0021               	movlb	1	; select bank1
  1507  02AE  0195               	clrf	21	;volatile
  1508                           
  1509                           ;blockzUSB.c: 211:     FVRCON = 0;
  1510  02AF  0022               	movlb	2	; select bank2
  1511  02B0  0197               	clrf	23	;volatile
  1512                           
  1513                           ;blockzUSB.c: 212:     ADCON0 = 0;
  1514  02B1  0021               	movlb	1	; select bank1
  1515  02B2  019D               	clrf	29	;volatile
  1516                           
  1517                           ;blockzUSB.c: 213:     ADCON1 = 0;
  1518  02B3  019E               	clrf	30	;volatile
  1519  02B4  0063               	sleep	;# 
  1520  02B5  0008               	return
  1521  02B6                     __end_of_Sleep:	
  1522                           
  1523                           	psect	text6
  1524  00EB                     __ptext6:	
  1525 ;; *************** function _solidCol *****************
  1526 ;; Defined at:
  1527 ;;		line 163 in file "blockzUSB.c"
  1528 ;; Parameters:    Size  Location     Type
  1529 ;;  colour          1    wreg     PTR int 
  1530 ;;		 -> purple(6), lime(6), orange(6), white(6), 
  1531 ;;		 -> red(6), black(6), 
  1532 ;; Auto vars:     Size  Location     Type
  1533 ;;  colour          1   32[BANK0 ] PTR int 
  1534 ;;		 -> purple(6), lime(6), orange(6), white(6), 
  1535 ;;		 -> red(6), black(6), 
  1536 ;;  B               4   28[BANK0 ] long 
  1537 ;;  G               4   24[BANK0 ] long 
  1538 ;;  R               4   20[BANK0 ] long 
  1539 ;; Return value:  Size  Location     Type
  1540 ;;                  1    wreg      void 
  1541 ;; Registers used:
  1542 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1543 ;; Tracked objects:
  1544 ;;		On entry : 0/0
  1545 ;;		On exit  : 0/0
  1546 ;;		Unchanged: 0/0
  1547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1548 ;;      Params:         0       0       0       0
  1549 ;;      Locals:         0      13       0       0
  1550 ;;      Temps:          0       2       0       0
  1551 ;;      Totals:         0      15       0       0
  1552 ;;Total ram usage:       15 bytes
  1553 ;; Hardware stack levels used:    1
  1554 ;; Hardware stack levels required when called:    2
  1555 ;; This function calls:
  1556 ;;		___aldiv
  1557 ;;		___lmul
  1558 ;; This function is called by:
  1559 ;;		_Sleep
  1560 ;;		_main
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564                           
  1565                           ;psect for function _solidCol
  1566  00EB                     _solidCol:	
  1567                           
  1568                           ;incstack = 0
  1569                           ; Regs used in _solidCol: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1570                           ;solidCol@colour stored from wreg
  1571  00EB  0020               	movlb	0	; select bank0
  1572  00EC  00C0               	movwf	solidCol@colour
  1573                           
  1574                           ;blockzUSB.c: 165:     if(skipColour == 1){
  1575  00ED  0364               	decf	_skipColour,w
  1576  00EE  0465               	iorwf	_skipColour+1,w
  1577  00EF  1903               	btfsc	3,2
  1578  00F0  0008               	return
  1579                           
  1580                           ;blockzUSB.c: 170:     long R = (colour[0] * 65535) / 100;
  1581  00F1  3000               	movlw	0
  1582  00F2  00A7               	movwf	___aldiv@divisor+3
  1583  00F3  3000               	movlw	0
  1584  00F4  00A6               	movwf	___aldiv@divisor+2
  1585  00F5  3000               	movlw	0
  1586  00F6  00A5               	movwf	___aldiv@divisor+1
  1587  00F7  3064               	movlw	100
  1588  00F8  00A4               	movwf	___aldiv@divisor
  1589  00F9  0840               	movf	solidCol@colour,w
  1590  00FA  0086               	movwf	6
  1591  00FB  0187               	clrf	7
  1592  00FC  3F40               	moviw [0]fsr1
  1593  00FD  00B2               	movwf	??_solidCol
  1594  00FE  3F41               	moviw [1]fsr1
  1595  00FF  00B3               	movwf	??_solidCol+1
  1596  0100  0832               	movf	??_solidCol,w
  1597  0101  00F2               	movwf	___lmul@multiplier
  1598  0102  0833               	movf	??_solidCol+1,w
  1599  0103  00F3               	movwf	___lmul@multiplier+1
  1600  0104  0D89               	rlf	9,f
  1601  0105  3B89               	subwfb	9,f
  1602  0106  0989               	comf	9,f
  1603  0107  00F4               	movwf	___lmul@multiplier+2
  1604  0108  00F5               	movwf	___lmul@multiplier+3
  1605  0109  3000               	movlw	0
  1606  010A  00F9               	movwf	___lmul@multiplicand+3
  1607  010B  3000               	movlw	0
  1608  010C  00F8               	movwf	___lmul@multiplicand+2
  1609  010D  30FF               	movlw	255
  1610  010E  00F7               	movwf	___lmul@multiplicand+1
  1611  010F  30FF               	movlw	255
  1612  0110  00F6               	movwf	___lmul@multiplicand
  1613  0111  2342               	fcall	___lmul
  1614  0112  0875               	movf	?___lmul+3,w
  1615  0113  0020               	movlb	0	; select bank0
  1616  0114  00AB               	movwf	___aldiv@dividend+3
  1617  0115  0874               	movf	?___lmul+2,w
  1618  0116  00AA               	movwf	___aldiv@dividend+2
  1619  0117  0873               	movf	?___lmul+1,w
  1620  0118  00A9               	movwf	___aldiv@dividend+1
  1621  0119  0872               	movf	?___lmul,w
  1622  011A  00A8               	movwf	___aldiv@dividend
  1623  011B  21C2               	fcall	___aldiv
  1624  011C  0020               	movlb	0	; select bank0
  1625  011D  0827               	movf	?___aldiv+3,w
  1626  011E  00B7               	movwf	solidCol@R+3
  1627  011F  0826               	movf	?___aldiv+2,w
  1628  0120  00B6               	movwf	solidCol@R+2
  1629  0121  0825               	movf	?___aldiv+1,w
  1630  0122  00B5               	movwf	solidCol@R+1
  1631  0123  0824               	movf	?___aldiv,w
  1632  0124  00B4               	movwf	solidCol@R
  1633                           
  1634                           ;blockzUSB.c: 171:     long G = (colour[1] * 65535) / 100;
  1635  0125  3000               	movlw	0
  1636  0126  00A7               	movwf	___aldiv@divisor+3
  1637  0127  3000               	movlw	0
  1638  0128  00A6               	movwf	___aldiv@divisor+2
  1639  0129  3000               	movlw	0
  1640  012A  00A5               	movwf	___aldiv@divisor+1
  1641  012B  3064               	movlw	100
  1642  012C  00A4               	movwf	___aldiv@divisor
  1643  012D  0840               	movf	solidCol@colour,w
  1644  012E  3E02               	addlw	2
  1645  012F  0086               	movwf	6
  1646  0130  0187               	clrf	7
  1647  0131  3F40               	moviw [0]fsr1
  1648  0132  00B2               	movwf	??_solidCol
  1649  0133  3F41               	moviw [1]fsr1
  1650  0134  00B3               	movwf	??_solidCol+1
  1651  0135  0832               	movf	??_solidCol,w
  1652  0136  00F2               	movwf	___lmul@multiplier
  1653  0137  0833               	movf	??_solidCol+1,w
  1654  0138  00F3               	movwf	___lmul@multiplier+1
  1655  0139  0D89               	rlf	9,f
  1656  013A  3B89               	subwfb	9,f
  1657  013B  0989               	comf	9,f
  1658  013C  00F4               	movwf	___lmul@multiplier+2
  1659  013D  00F5               	movwf	___lmul@multiplier+3
  1660  013E  3000               	movlw	0
  1661  013F  00F9               	movwf	___lmul@multiplicand+3
  1662  0140  3000               	movlw	0
  1663  0141  00F8               	movwf	___lmul@multiplicand+2
  1664  0142  30FF               	movlw	255
  1665  0143  00F7               	movwf	___lmul@multiplicand+1
  1666  0144  30FF               	movlw	255
  1667  0145  00F6               	movwf	___lmul@multiplicand
  1668  0146  2342               	fcall	___lmul
  1669  0147  0875               	movf	?___lmul+3,w
  1670  0148  0020               	movlb	0	; select bank0
  1671  0149  00AB               	movwf	___aldiv@dividend+3
  1672  014A  0874               	movf	?___lmul+2,w
  1673  014B  00AA               	movwf	___aldiv@dividend+2
  1674  014C  0873               	movf	?___lmul+1,w
  1675  014D  00A9               	movwf	___aldiv@dividend+1
  1676  014E  0872               	movf	?___lmul,w
  1677  014F  00A8               	movwf	___aldiv@dividend
  1678  0150  21C2               	fcall	___aldiv
  1679  0151  0020               	movlb	0	; select bank0
  1680  0152  0827               	movf	?___aldiv+3,w
  1681  0153  00BB               	movwf	solidCol@G+3
  1682  0154  0826               	movf	?___aldiv+2,w
  1683  0155  00BA               	movwf	solidCol@G+2
  1684  0156  0825               	movf	?___aldiv+1,w
  1685  0157  00B9               	movwf	solidCol@G+1
  1686  0158  0824               	movf	?___aldiv,w
  1687  0159  00B8               	movwf	solidCol@G
  1688                           
  1689                           ;blockzUSB.c: 172:     long B = (colour[2] * 65535) / 100;
  1690  015A  3000               	movlw	0
  1691  015B  00A7               	movwf	___aldiv@divisor+3
  1692  015C  3000               	movlw	0
  1693  015D  00A6               	movwf	___aldiv@divisor+2
  1694  015E  3000               	movlw	0
  1695  015F  00A5               	movwf	___aldiv@divisor+1
  1696  0160  3064               	movlw	100
  1697  0161  00A4               	movwf	___aldiv@divisor
  1698  0162  0840               	movf	solidCol@colour,w
  1699  0163  3E04               	addlw	4
  1700  0164  0086               	movwf	6
  1701  0165  0187               	clrf	7
  1702  0166  3F40               	moviw [0]fsr1
  1703  0167  00B2               	movwf	??_solidCol
  1704  0168  3F41               	moviw [1]fsr1
  1705  0169  00B3               	movwf	??_solidCol+1
  1706  016A  0832               	movf	??_solidCol,w
  1707  016B  00F2               	movwf	___lmul@multiplier
  1708  016C  0833               	movf	??_solidCol+1,w
  1709  016D  00F3               	movwf	___lmul@multiplier+1
  1710  016E  0D89               	rlf	9,f
  1711  016F  3B89               	subwfb	9,f
  1712  0170  0989               	comf	9,f
  1713  0171  00F4               	movwf	___lmul@multiplier+2
  1714  0172  00F5               	movwf	___lmul@multiplier+3
  1715  0173  3000               	movlw	0
  1716  0174  00F9               	movwf	___lmul@multiplicand+3
  1717  0175  3000               	movlw	0
  1718  0176  00F8               	movwf	___lmul@multiplicand+2
  1719  0177  30FF               	movlw	255
  1720  0178  00F7               	movwf	___lmul@multiplicand+1
  1721  0179  30FF               	movlw	255
  1722  017A  00F6               	movwf	___lmul@multiplicand
  1723  017B  2342               	fcall	___lmul
  1724  017C  0875               	movf	?___lmul+3,w
  1725  017D  0020               	movlb	0	; select bank0
  1726  017E  00AB               	movwf	___aldiv@dividend+3
  1727  017F  0874               	movf	?___lmul+2,w
  1728  0180  00AA               	movwf	___aldiv@dividend+2
  1729  0181  0873               	movf	?___lmul+1,w
  1730  0182  00A9               	movwf	___aldiv@dividend+1
  1731  0183  0872               	movf	?___lmul,w
  1732  0184  00A8               	movwf	___aldiv@dividend
  1733  0185  21C2               	fcall	___aldiv
  1734  0186  0020               	movlb	0	; select bank0
  1735  0187  0827               	movf	?___aldiv+3,w
  1736  0188  00BF               	movwf	solidCol@B+3
  1737  0189  0826               	movf	?___aldiv+2,w
  1738  018A  00BE               	movwf	solidCol@B+2
  1739  018B  0825               	movf	?___aldiv+1,w
  1740  018C  00BD               	movwf	solidCol@B+1
  1741  018D  0824               	movf	?___aldiv,w
  1742  018E  00BC               	movwf	solidCol@B
  1743                           
  1744                           ;blockzUSB.c: 175:     PWM1DC = R;
  1745  018F  0835               	movf	solidCol@R+1,w
  1746  0190  003B               	movlb	27	; select bank27
  1747  0191  0094               	movwf	20	;volatile
  1748  0192  0020               	movlb	0	; select bank0
  1749  0193  0834               	movf	solidCol@R,w
  1750  0194  003B               	movlb	27	; select bank27
  1751  0195  0093               	movwf	19	;volatile
  1752                           
  1753                           ;blockzUSB.c: 176:     PWM1LD = 1;
  1754  0196  179F               	bsf	31,7	;volatile
  1755                           
  1756                           ;blockzUSB.c: 178:     PWM2DC = G;
  1757  0197  0020               	movlb	0	; select bank0
  1758  0198  0839               	movf	solidCol@G+1,w
  1759  0199  003B               	movlb	27	; select bank27
  1760  019A  00A4               	movwf	36	;volatile
  1761  019B  0020               	movlb	0	; select bank0
  1762  019C  0838               	movf	solidCol@G,w
  1763  019D  003B               	movlb	27	; select bank27
  1764  019E  00A3               	movwf	35	;volatile
  1765                           
  1766                           ;blockzUSB.c: 179:     PWM2LD = 1;
  1767  019F  17AF               	bsf	47,7	;volatile
  1768                           
  1769                           ;blockzUSB.c: 181:     PWM3DC = B;
  1770  01A0  0020               	movlb	0	; select bank0
  1771  01A1  083D               	movf	solidCol@B+1,w
  1772  01A2  003B               	movlb	27	; select bank27
  1773  01A3  00B4               	movwf	52	;volatile
  1774  01A4  0020               	movlb	0	; select bank0
  1775  01A5  083C               	movf	solidCol@B,w
  1776  01A6  003B               	movlb	27	; select bank27
  1777  01A7  00B3               	movwf	51	;volatile
  1778                           
  1779                           ;blockzUSB.c: 182:     PWM3LD = 1;
  1780  01A8  17BF               	bsf	63,7	;volatile
  1781                           
  1782                           ;blockzUSB.c: 184:     prevR = redVal;
  1783  01A9  0020               	movlb	0	; select bank0
  1784  01AA  086F               	movf	_redVal+1,w
  1785  01AB  0021               	movlb	1	; select bank1
  1786  01AC  00E7               	movwf	(_prevR+1)^(0+128)
  1787  01AD  0020               	movlb	0	; select bank0
  1788  01AE  086E               	movf	_redVal,w
  1789  01AF  0021               	movlb	1	; select bank1
  1790  01B0  00E6               	movwf	_prevR^(0+128)
  1791                           
  1792                           ;blockzUSB.c: 185:     prevG = greenVal;
  1793  01B1  0020               	movlb	0	; select bank0
  1794  01B2  086D               	movf	_greenVal+1,w
  1795  01B3  0021               	movlb	1	; select bank1
  1796  01B4  00E5               	movwf	(_prevG+1)^(0+128)
  1797  01B5  0020               	movlb	0	; select bank0
  1798  01B6  086C               	movf	_greenVal,w
  1799  01B7  0021               	movlb	1	; select bank1
  1800  01B8  00E4               	movwf	_prevG^(0+128)
  1801                           
  1802                           ;blockzUSB.c: 186:     prevB = blueVal;
  1803  01B9  0020               	movlb	0	; select bank0
  1804  01BA  086B               	movf	_blueVal+1,w
  1805  01BB  0021               	movlb	1	; select bank1
  1806  01BC  00E3               	movwf	(_prevB+1)^(0+128)
  1807  01BD  0020               	movlb	0	; select bank0
  1808  01BE  086A               	movf	_blueVal,w
  1809  01BF  0021               	movlb	1	; select bank1
  1810  01C0  00E2               	movwf	_prevB^(0+128)
  1811  01C1  0008               	return
  1812  01C2                     __end_of_solidCol:	
  1813                           
  1814                           	psect	text7
  1815  0342                     __ptext7:	
  1816 ;; *************** function ___lmul *****************
  1817 ;; Defined at:
  1818 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul32.c"
  1819 ;; Parameters:    Size  Location     Type
  1820 ;;  multiplier      4    2[COMMON] unsigned long 
  1821 ;;  multiplicand    4    6[COMMON] unsigned long 
  1822 ;; Auto vars:     Size  Location     Type
  1823 ;;  product         4    0[BANK0 ] unsigned long 
  1824 ;; Return value:  Size  Location     Type
  1825 ;;                  4    2[COMMON] unsigned long 
  1826 ;; Registers used:
  1827 ;;		wreg, status,2, status,0
  1828 ;; Tracked objects:
  1829 ;;		On entry : 0/0
  1830 ;;		On exit  : 0/0
  1831 ;;		Unchanged: 0/0
  1832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1833 ;;      Params:         8       0       0       0
  1834 ;;      Locals:         0       4       0       0
  1835 ;;      Temps:          0       0       0       0
  1836 ;;      Totals:         8       4       0       0
  1837 ;;Total ram usage:       12 bytes
  1838 ;; Hardware stack levels used:    1
  1839 ;; Hardware stack levels required when called:    1
  1840 ;; This function calls:
  1841 ;;		Nothing
  1842 ;; This function is called by:
  1843 ;;		_solidCol
  1844 ;; This function uses a non-reentrant model
  1845 ;;
  1846                           
  1847                           
  1848                           ;psect for function ___lmul
  1849  0342                     ___lmul:	
  1850                           
  1851                           ;incstack = 0
  1852                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1853  0342  3000               	movlw	0
  1854  0343  0020               	movlb	0	; select bank0
  1855  0344  00A3               	movwf	___lmul@product+3
  1856  0345  3000               	movlw	0
  1857  0346  00A2               	movwf	___lmul@product+2
  1858  0347  3000               	movlw	0
  1859  0348  00A1               	movwf	___lmul@product+1
  1860  0349  3000               	movlw	0
  1861  034A  00A0               	movwf	___lmul@product
  1862  034B                     l1142:	
  1863  034B  1C72               	btfss	___lmul@multiplier,0
  1864  034C  2B56               	goto	l1146
  1865  034D  0876               	movf	___lmul@multiplicand,w
  1866  034E  0020               	movlb	0	; select bank0
  1867  034F  07A0               	addwf	___lmul@product,f
  1868  0350  0877               	movf	___lmul@multiplicand+1,w
  1869  0351  3DA1               	addwfc	___lmul@product+1,f
  1870  0352  0878               	movf	___lmul@multiplicand+2,w
  1871  0353  3DA2               	addwfc	___lmul@product+2,f
  1872  0354  0879               	movf	___lmul@multiplicand+3,w
  1873  0355  3DA3               	addwfc	___lmul@product+3,f
  1874  0356                     l1146:	
  1875  0356  3001               	movlw	1
  1876  0357                     u465:	
  1877  0357  35F6               	lslf	___lmul@multiplicand,f
  1878  0358  0DF7               	rlf	___lmul@multiplicand+1,f
  1879  0359  0DF8               	rlf	___lmul@multiplicand+2,f
  1880  035A  0DF9               	rlf	___lmul@multiplicand+3,f
  1881  035B  0B89               	decfsz	9,f
  1882  035C  2B57               	goto	u465
  1883  035D  3001               	movlw	1
  1884  035E                     u475:	
  1885  035E  36F5               	lsrf	___lmul@multiplier+3,f
  1886  035F  0CF4               	rrf	___lmul@multiplier+2,f
  1887  0360  0CF3               	rrf	___lmul@multiplier+1,f
  1888  0361  0CF2               	rrf	___lmul@multiplier,f
  1889  0362  0B89               	decfsz	9,f
  1890  0363  2B5E               	goto	u475
  1891  0364  0875               	movf	___lmul@multiplier+3,w
  1892  0365  0474               	iorwf	___lmul@multiplier+2,w
  1893  0366  0473               	iorwf	___lmul@multiplier+1,w
  1894  0367  0472               	iorwf	___lmul@multiplier,w
  1895  0368  1D03               	skipz
  1896  0369  2B4B               	goto	l1142
  1897  036A  0020               	movlb	0	; select bank0
  1898  036B  0823               	movf	___lmul@product+3,w
  1899  036C  00F5               	movwf	?___lmul+3
  1900  036D  0822               	movf	___lmul@product+2,w
  1901  036E  00F4               	movwf	?___lmul+2
  1902  036F  0821               	movf	___lmul@product+1,w
  1903  0370  00F3               	movwf	?___lmul+1
  1904  0371  0820               	movf	___lmul@product,w
  1905  0372  00F2               	movwf	?___lmul
  1906  0373  0008               	return
  1907  0374                     __end_of___lmul:	
  1908                           
  1909                           	psect	text8
  1910  01C2                     __ptext8:	
  1911 ;; *************** function ___aldiv *****************
  1912 ;; Defined at:
  1913 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aldiv.c"
  1914 ;; Parameters:    Size  Location     Type
  1915 ;;  divisor         4    4[BANK0 ] long 
  1916 ;;  dividend        4    8[BANK0 ] long 
  1917 ;; Auto vars:     Size  Location     Type
  1918 ;;  quotient        4   14[BANK0 ] long 
  1919 ;;  sign            1   13[BANK0 ] unsigned char 
  1920 ;;  counter         1   12[BANK0 ] unsigned char 
  1921 ;; Return value:  Size  Location     Type
  1922 ;;                  4    4[BANK0 ] long 
  1923 ;; Registers used:
  1924 ;;		wreg, status,2, status,0
  1925 ;; Tracked objects:
  1926 ;;		On entry : 0/0
  1927 ;;		On exit  : 0/0
  1928 ;;		Unchanged: 0/0
  1929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1930 ;;      Params:         0       8       0       0
  1931 ;;      Locals:         0       6       0       0
  1932 ;;      Temps:          1       0       0       0
  1933 ;;      Totals:         1      14       0       0
  1934 ;;Total ram usage:       15 bytes
  1935 ;; Hardware stack levels used:    1
  1936 ;; Hardware stack levels required when called:    1
  1937 ;; This function calls:
  1938 ;;		Nothing
  1939 ;; This function is called by:
  1940 ;;		_solidCol
  1941 ;; This function uses a non-reentrant model
  1942 ;;
  1943                           
  1944                           
  1945                           ;psect for function ___aldiv
  1946  01C2                     ___aldiv:	
  1947                           
  1948                           ;incstack = 0
  1949                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1950  01C2  0020               	movlb	0	; select bank0
  1951  01C3  01AD               	clrf	___aldiv@sign
  1952  01C4  1FA7               	btfss	___aldiv@divisor+3,7
  1953  01C5  29D3               	goto	l381
  1954  01C6  09A4               	comf	___aldiv@divisor,f
  1955  01C7  09A5               	comf	___aldiv@divisor+1,f
  1956  01C8  09A6               	comf	___aldiv@divisor+2,f
  1957  01C9  09A7               	comf	___aldiv@divisor+3,f
  1958  01CA  0AA4               	incf	___aldiv@divisor,f
  1959  01CB  1903               	skipnz
  1960  01CC  0AA5               	incf	___aldiv@divisor+1,f
  1961  01CD  1903               	skipnz
  1962  01CE  0AA6               	incf	___aldiv@divisor+2,f
  1963  01CF  1903               	skipnz
  1964  01D0  0AA7               	incf	___aldiv@divisor+3,f
  1965  01D1  01AD               	clrf	___aldiv@sign
  1966  01D2  0AAD               	incf	___aldiv@sign,f
  1967  01D3                     l381:	
  1968  01D3  1FAB               	btfss	___aldiv@dividend+3,7
  1969  01D4  29E4               	goto	l1164
  1970  01D5  09A8               	comf	___aldiv@dividend,f
  1971  01D6  09A9               	comf	___aldiv@dividend+1,f
  1972  01D7  09AA               	comf	___aldiv@dividend+2,f
  1973  01D8  09AB               	comf	___aldiv@dividend+3,f
  1974  01D9  0AA8               	incf	___aldiv@dividend,f
  1975  01DA  1903               	skipnz
  1976  01DB  0AA9               	incf	___aldiv@dividend+1,f
  1977  01DC  1903               	skipnz
  1978  01DD  0AAA               	incf	___aldiv@dividend+2,f
  1979  01DE  1903               	skipnz
  1980  01DF  0AAB               	incf	___aldiv@dividend+3,f
  1981  01E0  3001               	movlw	1
  1982  01E1  00FA               	movwf	??___aldiv
  1983  01E2  087A               	movf	??___aldiv,w
  1984  01E3  06AD               	xorwf	___aldiv@sign,f
  1985  01E4                     l1164:	
  1986  01E4  3000               	movlw	0
  1987  01E5  00B1               	movwf	___aldiv@quotient+3
  1988  01E6  3000               	movlw	0
  1989  01E7  00B0               	movwf	___aldiv@quotient+2
  1990  01E8  3000               	movlw	0
  1991  01E9  00AF               	movwf	___aldiv@quotient+1
  1992  01EA  3000               	movlw	0
  1993  01EB  00AE               	movwf	___aldiv@quotient
  1994  01EC  0827               	movf	___aldiv@divisor+3,w
  1995  01ED  0426               	iorwf	___aldiv@divisor+2,w
  1996  01EE  0425               	iorwf	___aldiv@divisor+1,w
  1997  01EF  0424               	iorwf	___aldiv@divisor,w
  1998  01F0  1903               	skipnz
  1999  01F1  2A2D               	goto	l1186
  2000  01F2  01AC               	clrf	___aldiv@counter
  2001  01F3  0AAC               	incf	___aldiv@counter,f
  2002  01F4                     l1172:	
  2003  01F4  1BA7               	btfsc	___aldiv@divisor+3,7
  2004  01F5  2A02               	goto	l1174
  2005  01F6  3001               	movlw	1
  2006  01F7                     u525:	
  2007  01F7  35A4               	lslf	___aldiv@divisor,f
  2008  01F8  0DA5               	rlf	___aldiv@divisor+1,f
  2009  01F9  0DA6               	rlf	___aldiv@divisor+2,f
  2010  01FA  0DA7               	rlf	___aldiv@divisor+3,f
  2011  01FB  0B89               	decfsz	9,f
  2012  01FC  29F7               	goto	u525
  2013  01FD  3001               	movlw	1
  2014  01FE  00FA               	movwf	??___aldiv
  2015  01FF  087A               	movf	??___aldiv,w
  2016  0200  07AC               	addwf	___aldiv@counter,f
  2017  0201  29F4               	goto	l1172
  2018  0202                     l1174:	
  2019  0202  3001               	movlw	1
  2020  0203                     u545:	
  2021  0203  35AE               	lslf	___aldiv@quotient,f
  2022  0204  0DAF               	rlf	___aldiv@quotient+1,f
  2023  0205  0DB0               	rlf	___aldiv@quotient+2,f
  2024  0206  0DB1               	rlf	___aldiv@quotient+3,f
  2025  0207  0B89               	decfsz	9,f
  2026  0208  2A03               	goto	u545
  2027  0209  0827               	movf	___aldiv@divisor+3,w
  2028  020A  022B               	subwf	___aldiv@dividend+3,w
  2029  020B  1D03               	skipz
  2030  020C  2A17               	goto	u555
  2031  020D  0826               	movf	___aldiv@divisor+2,w
  2032  020E  022A               	subwf	___aldiv@dividend+2,w
  2033  020F  1D03               	skipz
  2034  0210  2A17               	goto	u555
  2035  0211  0825               	movf	___aldiv@divisor+1,w
  2036  0212  0229               	subwf	___aldiv@dividend+1,w
  2037  0213  1D03               	skipz
  2038  0214  2A17               	goto	u555
  2039  0215  0824               	movf	___aldiv@divisor,w
  2040  0216  0228               	subwf	___aldiv@dividend,w
  2041  0217                     u555:	
  2042  0217  1C03               	skipc
  2043  0218  2A22               	goto	l1182
  2044  0219  0824               	movf	___aldiv@divisor,w
  2045  021A  02A8               	subwf	___aldiv@dividend,f
  2046  021B  0825               	movf	___aldiv@divisor+1,w
  2047  021C  3BA9               	subwfb	___aldiv@dividend+1,f
  2048  021D  0826               	movf	___aldiv@divisor+2,w
  2049  021E  3BAA               	subwfb	___aldiv@dividend+2,f
  2050  021F  0827               	movf	___aldiv@divisor+3,w
  2051  0220  3BAB               	subwfb	___aldiv@dividend+3,f
  2052  0221  142E               	bsf	___aldiv@quotient,0
  2053  0222                     l1182:	
  2054  0222  3001               	movlw	1
  2055  0223                     u565:	
  2056  0223  36A7               	lsrf	___aldiv@divisor+3,f
  2057  0224  0CA6               	rrf	___aldiv@divisor+2,f
  2058  0225  0CA5               	rrf	___aldiv@divisor+1,f
  2059  0226  0CA4               	rrf	___aldiv@divisor,f
  2060  0227  0B89               	decfsz	9,f
  2061  0228  2A23               	goto	u565
  2062  0229  3001               	movlw	1
  2063  022A  02AC               	subwf	___aldiv@counter,f
  2064  022B  1D03               	btfss	3,2
  2065  022C  2A02               	goto	l1174
  2066  022D                     l1186:	
  2067  022D  082D               	movf	___aldiv@sign,w
  2068  022E  1903               	btfsc	3,2
  2069  022F  2A3B               	goto	l1190
  2070  0230  09AE               	comf	___aldiv@quotient,f
  2071  0231  09AF               	comf	___aldiv@quotient+1,f
  2072  0232  09B0               	comf	___aldiv@quotient+2,f
  2073  0233  09B1               	comf	___aldiv@quotient+3,f
  2074  0234  0AAE               	incf	___aldiv@quotient,f
  2075  0235  1903               	skipnz
  2076  0236  0AAF               	incf	___aldiv@quotient+1,f
  2077  0237  1903               	skipnz
  2078  0238  0AB0               	incf	___aldiv@quotient+2,f
  2079  0239  1903               	skipnz
  2080  023A  0AB1               	incf	___aldiv@quotient+3,f
  2081  023B                     l1190:	
  2082  023B  0831               	movf	___aldiv@quotient+3,w
  2083  023C  00A7               	movwf	?___aldiv+3
  2084  023D  0830               	movf	___aldiv@quotient+2,w
  2085  023E  00A6               	movwf	?___aldiv+2
  2086  023F  082F               	movf	___aldiv@quotient+1,w
  2087  0240  00A5               	movwf	?___aldiv+1
  2088  0241  082E               	movf	___aldiv@quotient,w
  2089  0242  00A4               	movwf	?___aldiv
  2090  0243  0008               	return
  2091  0244                     __end_of___aldiv:	
  2092                           
  2093                           	psect	intentry
  2094  0004                     __pintentry:	
  2095 ;; *************** function _my_isr *****************
  2096 ;; Defined at:
  2097 ;;		line 318 in file "blockzUSB.c"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;		None
  2100 ;; Auto vars:     Size  Location     Type
  2101 ;;		None
  2102 ;; Return value:  Size  Location     Type
  2103 ;;                  1    wreg      void 
  2104 ;; Registers used:
  2105 ;;		wreg, status,2, status,0
  2106 ;; Tracked objects:
  2107 ;;		On entry : 0/0
  2108 ;;		On exit  : 0/0
  2109 ;;		Unchanged: 0/0
  2110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2111 ;;      Params:         0       0       0       0
  2112 ;;      Locals:         0       0       0       0
  2113 ;;      Temps:          2       0       0       0
  2114 ;;      Totals:         2       0       0       0
  2115 ;;Total ram usage:        2 bytes
  2116 ;; Hardware stack levels used:    1
  2117 ;; This function calls:
  2118 ;;		Nothing
  2119 ;; This function is called by:
  2120 ;;		Interrupt level 1
  2121 ;; This function uses a non-reentrant model
  2122 ;;
  2123                           
  2124  0004                     _my_isr:	
  2125                           
  2126                           ;incstack = 0
  2127  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2128                           
  2129                           ; Regs used in _my_isr: [wreg+status,2+status,0]
  2130  0005  3180               	pagesel	$
  2131                           
  2132                           ;blockzUSB.c: 319:     TMR0IF = 0;
  2133  0006  110B               	bcf	11,2	;volatile
  2134                           
  2135                           ;blockzUSB.c: 320:     sleepCount++;
  2136  0007  3001               	movlw	1
  2137  0008  0020               	movlb	0	; select bank0
  2138  0009  07C8               	addwf	_sleepCount,f
  2139  000A  3000               	movlw	0
  2140  000B  3DC9               	addwfc	_sleepCount+1,f
  2141                           
  2142                           ;blockzUSB.c: 321:     if(sleepCount > 500){
  2143  000C  0849               	movf	_sleepCount+1,w
  2144  000D  3A80               	xorlw	128
  2145  000E  00F0               	movwf	??_my_isr
  2146  000F  3081               	movlw	129
  2147  0010  0270               	subwf	??_my_isr,w
  2148  0011  1D03               	skipz
  2149  0012  2815               	goto	u79_25
  2150  0013  30F5               	movlw	245
  2151  0014  0248               	subwf	_sleepCount,w
  2152  0015                     u79_25:	
  2153  0015  1C03               	skipc
  2154  0016  2843               	goto	i1l1440
  2155                           
  2156                           ;blockzUSB.c: 322:         if(callSleep == 1){
  2157  0017  0020               	movlb	0	; select bank0
  2158  0018  034A               	decf	_callSleep,w
  2159  0019  044B               	iorwf	_callSleep+1,w
  2160  001A  1903               	btfsc	3,2
  2161  001B  28B9               	goto	i1l219
  2162                           
  2163                           ;blockzUSB.c: 326:             sleepCount = 0;
  2164                           
  2165                           ;blockzUSB.c: 323:             return;
  2166  001C  01C8               	clrf	_sleepCount
  2167  001D  01C9               	clrf	_sleepCount+1
  2168                           
  2169                           ;blockzUSB.c: 327:             ADCON0bits.GO = 1;
  2170  001E  0021               	movlb	1	; select bank1
  2171  001F  149D               	bsf	29,1	;volatile
  2172  0020                     i1l221:	
  2173                           ;blockzUSB.c: 329:                 ;
  2174                           
  2175                           
  2176                           ;blockzUSB.c: 328:             while(ADCON0bits.GO)
  2177  0020  189D               	btfsc	29,1	;volatile
  2178  0021  2820               	goto	i1l221
  2179                           
  2180                           ;blockzUSB.c: 331:             adcVal = ADRESH;
  2181  0022  081C               	movf	28,w	;volatile
  2182  0023  00F0               	movwf	??_my_isr
  2183  0024  01F1               	clrf	??_my_isr+1
  2184  0025  0870               	movf	??_my_isr,w
  2185  0026  0020               	movlb	0	; select bank0
  2186  0027  00CE               	movwf	_adcVal
  2187  0028  0871               	movf	??_my_isr+1,w
  2188  0029  00CF               	movwf	_adcVal+1
  2189                           
  2190                           ;blockzUSB.c: 333:             if(adcVal >= 75){
  2191  002A  084F               	movf	_adcVal+1,w
  2192  002B  3A80               	xorlw	128
  2193  002C  00F0               	movwf	??_my_isr
  2194  002D  3080               	movlw	128
  2195  002E  0270               	subwf	??_my_isr,w
  2196  002F  1D03               	skipz
  2197  0030  2833               	goto	u82_25
  2198  0031  304B               	movlw	75
  2199  0032  024E               	subwf	_adcVal,w
  2200  0033                     u82_25:	
  2201  0033  1C03               	skipc
  2202  0034  2840               	goto	i1l1438
  2203                           
  2204                           ;blockzUSB.c: 335:                 batLow = 1;
  2205  0035  3001               	movlw	1
  2206  0036  0021               	movlb	1	; select bank1
  2207  0037  00E8               	movwf	_batLow^(0+128)
  2208  0038  3000               	movlw	0
  2209  0039  00E9               	movwf	(_batLow^(0+128)+1)
  2210                           
  2211                           ;blockzUSB.c: 336:                 callSleep = 1;
  2212  003A  3001               	movlw	1
  2213  003B  0020               	movlb	0	; select bank0
  2214  003C  00CA               	movwf	_callSleep
  2215  003D  3000               	movlw	0
  2216  003E  00CB               	movwf	_callSleep+1
  2217                           
  2218                           ;blockzUSB.c: 337:             }
  2219  003F  2843               	goto	i1l1440
  2220  0040                     i1l1438:	
  2221                           
  2222                           ;blockzUSB.c: 339:                 batLow = 0;
  2223  0040  0021               	movlb	1	; select bank1
  2224  0041  01E8               	clrf	_batLow^(0+128)
  2225  0042  01E9               	clrf	(_batLow+1)^(0+128)
  2226  0043                     i1l1440:	
  2227                           
  2228                           ;blockzUSB.c: 344:     if(RA3 == 0){
  2229  0043  0020               	movlb	0	; select bank0
  2230  0044  198C               	btfsc	12,3	;volatile
  2231  0045  287A               	goto	i1l1458
  2232                           
  2233                           ;blockzUSB.c: 345:         intCount1++;
  2234  0046  3001               	movlw	1
  2235  0047  07D6               	addwf	_intCount1,f
  2236  0048  3000               	movlw	0
  2237  0049  3DD7               	addwfc	_intCount1+1,f
  2238                           
  2239                           ;blockzUSB.c: 346:         if(intCount1 > timerCount){
  2240  004A  0863               	movf	_timerCount+1,w
  2241  004B  3A80               	xorlw	128
  2242  004C  00F0               	movwf	??_my_isr
  2243  004D  0857               	movf	_intCount1+1,w
  2244  004E  3A80               	xorlw	128
  2245  004F  0270               	subwf	??_my_isr,w
  2246  0050  1D03               	skipz
  2247  0051  2854               	goto	u84_25
  2248  0052  0856               	movf	_intCount1,w
  2249  0053  0262               	subwf	_timerCount,w
  2250  0054                     u84_25:	
  2251  0054  1803               	skipnc
  2252  0055  287E               	goto	i1l1460
  2253                           
  2254                           ;blockzUSB.c: 347:             if(sw1Set == 0){
  2255  0056  0020               	movlb	0	; select bank0
  2256  0057  0852               	movf	_sw1Set,w
  2257  0058  0453               	iorwf	_sw1Set+1,w
  2258  0059  1D03               	btfss	3,2
  2259  005A  287E               	goto	i1l1460
  2260                           
  2261                           ;blockzUSB.c: 348:                 swNum = 1;
  2262  005B  3001               	movlw	1
  2263  005C  0021               	movlb	1	; select bank1
  2264  005D  00BE               	movwf	_swNum^(0+128)
  2265  005E  3000               	movlw	0
  2266  005F  00BF               	movwf	(_swNum^(0+128)+1)
  2267                           
  2268                           ;blockzUSB.c: 349:                 sw1Count++;
  2269  0060  3001               	movlw	1
  2270  0061  07C0               	addwf	_sw1Count^(0+128),f
  2271  0062  3000               	movlw	0
  2272  0063  3DC1               	addwfc	(_sw1Count+1)^(0+128),f
  2273                           
  2274                           ;blockzUSB.c: 350:                 sw2Count = 0;
  2275  0064  01EC               	clrf	_sw2Count^(0+128)
  2276  0065  01ED               	clrf	(_sw2Count+1)^(0+128)
  2277                           
  2278                           ;blockzUSB.c: 351:                 exitLoop = 1;
  2279  0066  01FB               	clrf	_exitLoop
  2280  0067  0AFB               	incf	_exitLoop,f
  2281                           
  2282                           ;blockzUSB.c: 352:                 skipColour = 1;
  2283  0068  3001               	movlw	1
  2284  0069  0020               	movlb	0	; select bank0
  2285  006A  00E4               	movwf	_skipColour
  2286  006B  3000               	movlw	0
  2287  006C  00E5               	movwf	_skipColour+1
  2288                           
  2289                           ;blockzUSB.c: 353:                 sw1Set = 1;
  2290  006D  3001               	movlw	1
  2291  006E  00D2               	movwf	_sw1Set
  2292  006F  3000               	movlw	0
  2293  0070  00D3               	movwf	_sw1Set+1
  2294                           
  2295                           ;blockzUSB.c: 354:                 dummy = PORTA;
  2296  0071  080C               	movf	12,w	;volatile
  2297  0072  00F0               	movwf	??_my_isr
  2298  0073  01F1               	clrf	??_my_isr+1
  2299  0074  0870               	movf	??_my_isr,w
  2300  0075  0021               	movlb	1	; select bank1
  2301  0076  00EA               	movwf	_dummy^(0+128)
  2302  0077  0871               	movf	??_my_isr+1,w
  2303  0078  00EB               	movwf	(_dummy+1)^(0+128)
  2304                           
  2305                           ;blockzUSB.c: 360:     }
  2306                           
  2307                           ;blockzUSB.c: 359:         }
  2308                           
  2309                           ;blockzUSB.c: 355:             }
  2310  0079  287E               	goto	i1l1460
  2311  007A                     i1l1458:	
  2312                           
  2313                           ;blockzUSB.c: 362:     intCount1 = 0;
  2314  007A  01D6               	clrf	_intCount1
  2315  007B  01D7               	clrf	_intCount1+1
  2316                           
  2317                           ;blockzUSB.c: 363:     sw1Set = 0;
  2318  007C  01D2               	clrf	_sw1Set
  2319  007D  01D3               	clrf	_sw1Set+1
  2320  007E                     i1l1460:	
  2321                           
  2322                           ;blockzUSB.c: 366:     if(RA4 == 0){
  2323  007E  0020               	movlb	0	; select bank0
  2324  007F  1A0C               	btfsc	12,4	;volatile
  2325  0080  28B5               	goto	i1l1478
  2326                           
  2327                           ;blockzUSB.c: 367:         intCount2++;
  2328  0081  3001               	movlw	1
  2329  0082  07D4               	addwf	_intCount2,f
  2330  0083  3000               	movlw	0
  2331  0084  3DD5               	addwfc	_intCount2+1,f
  2332                           
  2333                           ;blockzUSB.c: 368:         if(intCount2 > timerCount){
  2334  0085  0863               	movf	_timerCount+1,w
  2335  0086  3A80               	xorlw	128
  2336  0087  00F0               	movwf	??_my_isr
  2337  0088  0855               	movf	_intCount2+1,w
  2338  0089  3A80               	xorlw	128
  2339  008A  0270               	subwf	??_my_isr,w
  2340  008B  1D03               	skipz
  2341  008C  288F               	goto	u87_25
  2342  008D  0854               	movf	_intCount2,w
  2343  008E  0262               	subwf	_timerCount,w
  2344  008F                     u87_25:	
  2345  008F  1803               	skipnc
  2346  0090  28B9               	goto	i1l219
  2347                           
  2348                           ;blockzUSB.c: 369:             if(sw2Set == 0){
  2349  0091  0020               	movlb	0	; select bank0
  2350  0092  0850               	movf	_sw2Set,w
  2351  0093  0451               	iorwf	_sw2Set+1,w
  2352  0094  1D03               	btfss	3,2
  2353  0095  28B9               	goto	i1l219
  2354                           
  2355                           ;blockzUSB.c: 370:                 swNum = 2;
  2356  0096  3002               	movlw	2
  2357  0097  0021               	movlb	1	; select bank1
  2358  0098  00BE               	movwf	_swNum^(0+128)
  2359  0099  3000               	movlw	0
  2360  009A  00BF               	movwf	(_swNum^(0+128)+1)
  2361                           
  2362                           ;blockzUSB.c: 371:                 sw2Count++;
  2363  009B  3001               	movlw	1
  2364  009C  07EC               	addwf	_sw2Count^(0+128),f
  2365  009D  3000               	movlw	0
  2366  009E  3DED               	addwfc	(_sw2Count+1)^(0+128),f
  2367                           
  2368                           ;blockzUSB.c: 372:                 sw1Count = 0;
  2369  009F  01C0               	clrf	_sw1Count^(0+128)
  2370  00A0  01C1               	clrf	(_sw1Count+1)^(0+128)
  2371                           
  2372                           ;blockzUSB.c: 373:                 exitLoop = 1;
  2373  00A1  01FB               	clrf	_exitLoop
  2374  00A2  0AFB               	incf	_exitLoop,f
  2375                           
  2376                           ;blockzUSB.c: 374:                 skipColour = 1;
  2377  00A3  3001               	movlw	1
  2378  00A4  0020               	movlb	0	; select bank0
  2379  00A5  00E4               	movwf	_skipColour
  2380  00A6  3000               	movlw	0
  2381  00A7  00E5               	movwf	_skipColour+1
  2382                           
  2383                           ;blockzUSB.c: 375:                 sw2Set = 1;
  2384  00A8  3001               	movlw	1
  2385  00A9  00D0               	movwf	_sw2Set
  2386  00AA  3000               	movlw	0
  2387  00AB  00D1               	movwf	_sw2Set+1
  2388                           
  2389                           ;blockzUSB.c: 376:                 dummy = PORTA;
  2390  00AC  080C               	movf	12,w	;volatile
  2391  00AD  00F0               	movwf	??_my_isr
  2392  00AE  01F1               	clrf	??_my_isr+1
  2393  00AF  0870               	movf	??_my_isr,w
  2394  00B0  0021               	movlb	1	; select bank1
  2395  00B1  00EA               	movwf	_dummy^(0+128)
  2396  00B2  0871               	movf	??_my_isr+1,w
  2397  00B3  00EB               	movwf	(_dummy+1)^(0+128)
  2398                           
  2399                           ;blockzUSB.c: 377:             }
  2400  00B4  28B9               	goto	i1l219
  2401  00B5                     i1l1478:	
  2402                           
  2403                           ;blockzUSB.c: 384:     intCount2 = 0;
  2404  00B5  01D4               	clrf	_intCount2
  2405  00B6  01D5               	clrf	_intCount2+1
  2406                           
  2407                           ;blockzUSB.c: 385:     sw2Set = 0;
  2408  00B7  01D0               	clrf	_sw2Set
  2409  00B8  01D1               	clrf	_sw2Set+1
  2410  00B9                     i1l219:	
  2411  00B9  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2412  00BA  0009               	retfie
  2413  00BB                     __end_of_my_isr:	
  2414  007E                     btemp	set	126	;btemp
  2415  007E                     int$flags	set	126
  2416  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        82
    BSS         31
    Persistent  44
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      12
    BANK0            80     40      80
    BANK1            80      0      78
    BANK2            80      0       6

Pointer List with Targets:

    solidCol@colour	PTR int  size(1) Largest target is 6
		 -> purple(BANK1[6]), lime(BANK1[6]), orange(BANK1[6]), white(BANK1[6]), 
		 -> red(BANK1[6]), black(BANK0[6]), 


Critical Paths under _main in COMMON

    _solidCol->___aldiv
    ___aldiv->___lmul

Critical Paths under _my_isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_VddCheck
    _VddCheck->_delay_ms
    _delay_ms->_Sleep
    _Sleep->_solidCol
    _solidCol->___aldiv
    ___aldiv->___lmul

Critical Paths under _my_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _my_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _my_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    8896
                           _VddCheck
                           _delay_ms
                           _init_pic
                           _init_pwm
                           _solidCol
 ---------------------------------------------------------------------------------
 (1) _init_pwm                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_pic                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _VddCheck                                             2     2      0    4448
                                             38 BANK0      2     2      0
                              _Sleep
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             3     1      2    2646
                                             35 BANK0      3     1      2
                              _Sleep
 ---------------------------------------------------------------------------------
 (2) _Sleep                                                2     2      0    1802
                                             33 BANK0      2     2      0
                           _solidCol
 ---------------------------------------------------------------------------------
 (1) _solidCol                                            15    15      0    1802
                                             18 BANK0     15    15      0
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     548
                                              2 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     756
                                             10 COMMON     1     1      0
                                              4 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _my_isr                                               2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _VddCheck
     _Sleep
       _solidCol
         ___aldiv
           ___lmul (ARG)
         ___lmul
     _delay_ms
       _Sleep
         _solidCol
           ___aldiv
             ___lmul (ARG)
           ___lmul
   _delay_ms
     _Sleep
       _solidCol
         ___aldiv
           ___lmul (ARG)
         ___lmul
   _init_pic
   _init_pwm
   _solidCol
     ___aldiv
       ___lmul (ARG)
     ___lmul

 _my_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      B       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      B0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     28      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4E       8       97.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       6      10        7.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      B0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Mar 02 16:08:01 2020

            __CFG_CP$OFF 0000                      l238 03D2                      l184 03A0  
                    l381 01D3                      _RA3 0063                      _RA4 0064  
                    _RA5 0065                      u525 01F7                      u545 0203  
                    u465 0357                      u555 0217                      u475 035E  
                    u565 0223                      _red 00D6                      wreg 0009  
           __CFG_LVP$OFF 0000                     l1142 034B                     l1146 0356  
                   l1172 01F4                     l1164 01E4                     l1190 023B  
                   l1182 0222                     l1174 0202                     l1186 022D  
                   l1610 03B6                     l1626 03EE                     u1307 029C  
                   u1155 03AA                     _LATA 010C                     u1247 03BF  
                   u1175 03E5                     u1257 0251                     u1267 0260  
                   u1277 026F                     u1287 027E                     u1297 028D  
           __CFG_WRT$OFF 0000                     _blue 00B2                     _main 0374  
                   _hold 0066                     _lime 00C4                     _mint 0120  
                   _teal 00AC                     _wait 0068                     fsr0h 0005  
                   fsr1h 0007                     indf0 0000                     fsr0l 0004  
                   fsr1l 0006                     btemp 007E                     start 00BB  
        __end_of___aldiv 0244                    ?_main 0070            __CFG_WDTE$OFF 0000  
                  i1l221 0020                    i1l219 00B9                    _PORTA 000C  
                  _TRISA 008C                    u82_25 0033                    u84_25 0054  
                  _WPUA3 1063                    _WPUA4 1064                    u87_25 008F  
                  u79_25 0015      ___lmul@multiplicand 0076                    _Sleep 0244  
                  _black 005A                    _green 00B8                    _dummy 00EA  
                  _prevB 00E2                    _prevG 00E4                    _prevR 00E6  
                  _swNum 00BE                    _white 00DC           __CFG_BOREN$OFF 0000  
                  status 0003                    wtemp0 007E           __CFG_MCLRE$OFF 0000  
        __initialization 00BC             __end_of_main 03A0         __end_of_VddCheck 03F2  
                 ??_main 007B     delay_ms@microseconds 0043                   ?_Sleep 0070  
                 _ADCON0 009D                   _ADCON1 009E                   _ADRESH 009C  
                 _ANSELA 018C                   i1l1440 0043                   i1l1460 007E  
                 i1l1438 0040                   i1l1458 007A                   i1l1478 00B5  
                 _INTCON 000B                   _FVRCON 0117           solidCol@colour 0040  
                 _OSCCON 0099                   _PWM1DC 0D93                   _PWM2DC 0DA3  
                 _PWM3DC 0DB3                   _PWM1LD 6CFF                   _TMR0IF 005A  
                 _PWM2LD 6D7F                   _PWM3LD 6DFF                   _PWM1PH 0D91  
                 _PWM2PH 0DA1                   _PWM3PH 0DB1                   _PWM1PR 0D95  
                 _PWM2PR 0DA5                   _PWM3PR 0DB5                   _WDTCON 0097  
                 _TRISA0 0460                   _TRISA1 0461                   _TRISA2 0462  
                 _TRISA3 0463                   _TRISA4 0464                   _TRISA5 0465  
       __end_of_delay_ms 03CA           __CFG_PWRTE$OFF 0000                   _adcVal 004E  
                 ___lmul 0342                ??___aldiv 007A                   _batLow 00E8  
         __CFG_STVREN$ON 0000                   _sw1Set 0052                   _sw2Set 0050  
                 _redVal 006E         __end_of_init_pic 0417         __end_of_init_pwm 0300  
                 _orange 00D0                   _my_isr 0004                   _yellow 00A6  
                 _purple 00CA         __end_of_solidCol 01C2  __end_of__initialization 00E8  
         __pcstackCOMMON 0070            __end_of_Sleep 02B6             __pidataBANK0 0417  
           __pidataBANK1 0300             __pidataBANK2 0421                  ??_Sleep 0041  
             __pbssBANK0 0048               __pbssBANK1 00E8                ?_VddCheck 0070  
             __pmaintext 0374                  ?___lmul 0072               __pintentry 0004  
         ___lmul@product 0020                  ?_my_isr 0070               _flashDelay 00C2  
              ?_delay_ms 0043                  _PWM1CON 0D9B                  _PWM2CON 0DAB  
                _PWM3CON 0DBB                  _VREGCON 0197                ?_init_pic 0070  
             ??_VddCheck 0046                ?_init_pwm 0070                  ___aldiv 01C2  
              ?_solidCol 0070          __size_of___lmul 0032                  _blueVal 006A  
                __ptext1 02B6                  __ptext2 03F2                  __ptext3 03CA  
                __ptext4 03A0                  __ptext5 0244                  __ptext6 00EB  
                __ptext7 0342                  __ptext8 01C2          __size_of_my_isr 00B7  
                _inSleep 004C         ___aldiv@dividend 0028               ??_delay_ms 0045  
                _purpleL 00A0                  clrloop0 042E     end_of_initialization 00E8  
                init_ram 0427               ??_init_pic 0072                  initloop 0428  
             ??_init_pwm 0072               _sleepCount 0048               _skipColour 0064  
       ___aldiv@quotient 002E               ??_solidCol 0032               _timerCount 0062  
       __CFG_FOSC$INTOSC 0000           __end_of___lmul 0374           __end_of_my_isr 00BB  
    start_initialization 00BC            _lowPowerReset 0060        __size_of_VddCheck 0028  
               ??___lmul 007A              __pdataBANK0 0060              __pdataBANK1 00A0  
            __pdataBANK2 0120                 ??_my_isr 0070              __pbssCOMMON 007B  
              ___latbits 0000            __pcstackBANK0 0020        __size_of_delay_ms 002A  
              _callSleep 004A                __pnvBANK0 006A                __pnvBANK1 00E2  
      __size_of_init_pic 0025        __size_of_init_pwm 004A                 ?___aldiv 0024  
      __size_of_solidCol 00D7                _colourSet 0058                _intCount1 0056  
              _intCount2 0054           __size_of_Sleep 0072          ___aldiv@divisor 0024  
        ___aldiv@counter 002C                clear_ram0 042D               _ADCON0bits 009D  
      ___lmul@multiplier 0072                 _VddCheck 03CA         __size_of___aldiv 0082  
               _delay_ms 03A0                 _sw1Count 00C0                 _sw2Count 00EC  
               _greenVal 006C            __size_of_main 002C                 _exitLoop 007B  
               _init_pic 03F2                 _init_pwm 02B6                 _solidCol 00EB  
               int$flags 007E                solidCol@B 003C                solidCol@G 0038  
              solidCol@R 0034                 intlevel1 0000        __CFG_CLKOUTEN$OFF 0000  
             _PWM1CLKCON 0D9E               _PWM2CLKCON 0DAE               _PWM3CLKCON 0DBE  
             _OPTION_REG 0095             ___aldiv@sign 002D  
